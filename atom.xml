<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Musoucrow&#39; BLOG</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://musoucrow.github.io/"/>
  <updated>2020-05-10T14:01:44.953Z</updated>
  <id>https://musoucrow.github.io/</id>
  
  <author>
    <name>Musoucrow</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Demo的卡通渲染方案</title>
    <link href="https://musoucrow.github.io/2020/05/10/lbbn_shading/"/>
    <id>https://musoucrow.github.io/2020/05/10/lbbn_shading/</id>
    <published>2020-05-10T02:01:34.000Z</published>
    <updated>2020-05-10T14:01:44.953Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong>欢迎参与讨论，转载请注明出处。</strong>     </p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　本篇文章按理来说在三月便该发布了，因为插队原因延宕至今，不过好饭不怕晚，干就完了奥利给！阅读本文最好拥有一定的图形学知识，当然看个热闹也是好的。<br>　　游戏画面的风格是一开始便要定下的大事，这在古法2D主要通过素材本身及后期调色决定，没有太多文章可作。而在现代游戏（尤其是3D）则会通过Shader在原本的元素上进行加料，如通过<strong>基于物理的渲染（PBR）</strong>将模型凸显出金属、石头、布料等材质倾向。而在早期为了凸显3D模型的立体感，一般会采用经验总结出来的<strong>冯氏光照模型(Blinn-Phong)</strong>，这也是许多3D软件的默认方案，那将会让我们的模型长成这样：<br><img src="https://musoucrow.github.io/images/lbbn_shading/0.png" alt="0"><br>　　嗯，这有够雕塑风的，让我想起了当初名震一时的猴赛雷，有着异曲同工之妙：<br><img src="https://musoucrow.github.io/images/lbbn_shading/1.jpeg" alt="1"><br>　　由此可见，对于讲究卡通风格的游戏，这种通用的光照模型肯定得枪毙，于是本文才会诞生。对于这类<em>非写实方向</em>的渲染方案，业界称之为<em>NPR</em>。而往下细分则是日式卡通渲染，其中佼佼者当属《罪恶装备》系列，而《崩坏3rd》也是不少人在这方面的启蒙者。当然美术这一块没有绝对的风格一致，渲染也不例外，所以Demo里的卡通渲染方案乃是个人的方案，不代表业界的标准实现与效果。<br>　　Demo基于Unity2019.3开发，渲染管线为URP7.3.1，采用直接编写Shader的方式（HLSL），将一一介绍其中要点。本文所谓的卡通效果以<strong>日式2D赛璐璐风格</strong>为准，不论厚涂之类的风格。  </p>
<h2 id="着色"><a href="#着色" class="headerlink" title="着色"></a>着色</h2><p>　　首先我们先抛开一切：冯氏光照不好那咱们就是了。直接把贴图显示了，什么料都不要加。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 根据uv坐标获取对应贴图上的颜色</span></div><div class="line"></div><div class="line">half4 color = SAMPLE_TEXTURE2D(_BaseMap, sampler_BaseMap, uv);</div></pre></td></tr></table></figure>
<p><img src="https://musoucrow.github.io/images/lbbn_shading/2.png" alt="2"><br>　　嗯，虽然很原始，但好歹没那股恶心感了，把投影也加上：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 根据渲染管线提供的shadowCoord获取光照信息，并计算出投影颜色</span></div><div class="line"></div><div class="line">Light mainLight = GetMainLight(shadowCoord);</div><div class="line">color *= mainLight.color * (mainLight.distanceAttenuation * mainLight.shadowAttenuation);</div></pre></td></tr></table></figure>
<p><img src="https://musoucrow.github.io/images/lbbn_shading/3.png" alt="3"><br>　　哎呀，有了投影瞬间立体起来了，开始有《塞尔达传说：风之杖》内味了：<br><img src="https://musoucrow.github.io/images/lbbn_shading/4.jpeg" alt="4"><br>　　要加投影记得添加Pass：ShadowCaster，并且获取光照信息也需要开启一定的宏，这些并非本文重点，详情请查阅URP的Shader实现。<br>　　但只是如此还不够：颜色太鲜艳了，看久了会累。那么有两种方案：调色与着色，调色则是进行总体的颜色调节，使之不要这么鲜艳，着色则是<strong>根据模型面对光的吸收度</strong>决定明暗。这里还是选择着色：它将会增强模型的立体感。<br>　　这里说的着色其实就是冯氏光照中的<strong>漫反射（Diffuse）</strong>：当光照射到非平面的物体上，将根据与光的夹角决定吸收度（越是与光垂直的面越亮）。而在3D模型中，每个模型面都会往上发射一条射线，也就事实上构成了一条垂直于平面向量，这在数学中称之为<em>法线（Normal）</em>。我们可以使用<strong>向量点积(Dot)</strong>获取法线与光照方向之间的夹角，以此决定模型面的光亮程度。<br><img src="https://musoucrow.github.io/images/lbbn_shading/5.png" alt="5">  </p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">half NDotL = dot(normal, lightDir); <span class="comment">// 计算法线与光照方向的夹角系数</span></div><div class="line">NDotL = saturate(NDotL); <span class="comment">// 保证系数在0-1</span></div><div class="line">color *= NDotL;</div></pre></td></tr></table></figure>
<p><img src="https://musoucrow.github.io/images/lbbn_shading/6.png" alt="6"><br>　　啊这，这不是跟一开始差不多么？这是当然的，因为一开始便是冯氏光照的方案。其漫反射的思想其实并无问题，但原罪在于<strong>过渡太丰富了</strong>，每个模型面与光的夹角都不同，导致颜色都不同。整个模型看起来就过于立体，以至于产生了雕塑感。<br>　　而在日式2D卡通的世界里（尤其是赛璐璐），着色并不会有太详细的过渡，只是到了某个角度统一涂暗，反之为亮，最多在两者之间加点过渡而已。那么便基于此思想进行改造即可：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">half NDotL = dot(normal, lightDir); <span class="comment">// 计算法线与光照方向的夹角系数</span></div><div class="line"></div><div class="line"><span class="comment">// 根据_DiffuseRange约束系数，输出0-1的值</span></div><div class="line"><span class="comment">// 由于使用了smoothstep，在接近_DiffuseRange上下限时会做柔滑处理，使之产生过渡感</span></div><div class="line"><span class="comment">// _DiffuseRange的参考值为0.5, 0.7</span></div><div class="line">half v = smoothstep(_DiffuseRange[<span class="number">0</span>], _DiffuseRange[<span class="number">1</span>], NDotL);</div><div class="line"></div><div class="line"><span class="comment">// 根据根据v的值决定输出_LightRange范围内的值</span></div><div class="line"><span class="comment">// _LightRange的参考值为0.9, 1</span></div><div class="line">v = lerp(_LightRange[<span class="number">0</span>], _LightRange[<span class="number">1</span>], v);</div><div class="line"></div><div class="line">color *= v;</div></pre></td></tr></table></figure>
<p><img src="https://musoucrow.github.io/images/lbbn_shading/7.png" alt="7"><br>　　奥利给，这下便为模型划分了明暗，并在两者之间做了过渡，这种方式称之为<strong>二值化</strong>。着色并没有采用很明显的暗色，只是想凸显一点立体感，以及让画面更柔和，不那么刺眼罢了。</p>
<h2 id="描边"><a href="#描边" class="headerlink" title="描边"></a>描边</h2><p>　　接下来需要补上日式2D卡通不可或缺的一部分：<strong>描边（Outline）</strong>，描边有助于划分物体，明确空间上的层次，并提供一定的风味。<br>　　关于描边的实现方式，业界主要有<strong>模型多画一遍并将边缘外扩</strong>以及<strong>屏幕后处理</strong>的方案。前者方案在日式游戏较为流行，优点在于实现简单，性能也还算过得去，缺点是必须开抗锯齿不然没眼看。后者实现方式多样，并且根据实现方式能达到不一样的效果（如一定程度的内描边），但有些更适合搭配<strong>延迟渲染（Deferred Rendering）</strong>，而这代表着对显卡带宽与光照方案有要求。<br>　　另外在显示方案上也有区别，有追求任何缩放下描边大小不变的，也有自然派的。有让描边纯色的，也有要让描边根据贴图颜色决定的。本人采用的是<em>模型外扩、自然缩放、根据贴图颜色决定</em>的描边方案。<br>　　多显示一遍模型在Unity增加一个Pass即可，并且开启正面剔除（只显示背面，不然会干扰到正常模型）。并且在顶点着色器对模型顶点进行外扩，外扩的方向由所在模型面的法线决定。而颜色方面则在片元着色器根据贴图颜色进行置暗显示即可：  </p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 顶点着色器</span></div><div class="line"></div><div class="line">half4 viewPos = mul(UNITY_MATRIX_MV, input.positionOS); <span class="comment">// 将顶点从模型空间转为观察空间</span></div><div class="line">half3 normal = mul((float3x3)UNITY_MATRIX_IT_MV, input.normalOS); <span class="comment">// 同上，将法线转为观察空间</span></div><div class="line">viewPos += float4(normalize(normal), <span class="number">0</span>) * <span class="number">0.0075</span>; <span class="comment">// 顶点沿法线外扩</span></div><div class="line">output.positionCS = mul(UNITY_MATRIX_P, viewPos); <span class="comment">// 将顶点从观察空间转为裁剪空间</span></div><div class="line"></div><div class="line">output.uv = TRANSFORM_TEX(input.texcoord, _BaseMap); <span class="comment">// 提取uv</span></div><div class="line"></div><div class="line"><span class="keyword">return</span> output;</div></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 片源着色器</span></div><div class="line">color *= SAMPLE_TEXTURE2D(_BaseMap, sampler_BaseMap, input.uv); <span class="comment">// 提取贴图颜色</span></div><div class="line"></div><div class="line"><span class="keyword">return</span> color * <span class="number">0.3</span>; <span class="comment">// 压暗</span></div></pre></td></tr></table></figure>
<p><img src="https://musoucrow.github.io/images/lbbn_shading/8.png" alt="8">  </p>
<p>　　果不其然，没有抗锯齿的话就很搓，跟早期的跑跑卡丁车似的。安排一波MSAA8x：<br><img src="https://musoucrow.github.io/images/lbbn_shading/9.png" alt="9"><br>　　哎，这就舒服多了，当然实际上由于小泥人的关系，4x和8x实际上看不出区别，而2x也算可以接受的效果，这么看来能耗也还好。</p>
<h2 id="发光"><a href="#发光" class="headerlink" title="发光"></a>发光</h2><p>　　目前模型的显示还欠缺一些发光的元素，如一般头发和武器会有一些高光效果。这在冯氏光照称之为<strong>镜面光照（Specular）</strong>，本质上与漫反射一样，只是由视角方向与光照方向相加，并与法线做点积获得两者的夹角系数，如此便可实现根据摄像机与光照运动结合决定模型高光的位置。<br>　　当然仅此而已是不够的，显而易见仅此而已的话将会如漫反射一般范围很大，而高光实际上只需要一点即可。实际上会将之范围缩小：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">half3 halfVec = normalize(lightDir + viewDir); <span class="comment">// 将摄像头方向与光照方向相加</span></div><div class="line">half NdotH = dot(normal, halfVec); <span class="comment">// 与法线点积，获取夹角系数</span></div><div class="line">NdotH = saturate(NdotH); <span class="comment">// 保证在0-1</span></div><div class="line"></div><div class="line">half v = <span class="built_in">pow</span>(NdotH, _Smoothness); <span class="comment">// 缩小夹角系数的值，由于NdotH在0-1，所以pow后会变得更小，_Smoothness参考值为8-64</span></div><div class="line">color += color * v; <span class="comment">// 在原有颜色的基础上叠加</span></div></pre></td></tr></table></figure>
<p><img src="https://musoucrow.github.io/images/lbbn_shading/10.png" alt="10"><br>　　与之前一样，这样的高光过渡太强了，不够卡通，将之二值化：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">half v = <span class="built_in">pow</span>(NdotH, _Smoothness); <span class="comment">// 缩小夹角系数的值，由于NdotH在0-1，所以pow后会变得更小，_Smoothness参考值为8-64</span></div><div class="line">v = step(_SpecularRamp, v); <span class="comment">// 小于_SpecularRamp的值将为0，反之为1</span></div><div class="line">v = v * _SpecularStrength; <span class="comment">// 定义高光强度，参考值为0.2</span></div><div class="line"></div><div class="line">color += color * v; <span class="comment">// 在原有颜色的基础上叠加</span></div></pre></td></tr></table></figure>
<p><img src="https://musoucrow.github.io/images/lbbn_shading/11.png" alt="11"><br>　　这样的高光就更有手绘的感觉了，牛屎一块。但很显然对于头发而言光是一块牛屎高光是不够的，让美术自由的进行创作显然是更好的方案。于是引入了<strong>发光贴图（Emission）</strong>，其本身很简单：就是在最后把发光贴图的内容显示出来即可。而之所以要单独划分贴图而不是画死在原贴图，在于要自由的控制透明度甚至曝光，以及让发光参与单独的光照运算（与高光类似的方法，摄像机视角与光照方向相加后与法线点积）。<br><img src="https://musoucrow.github.io/images/lbbn_shading/12.png" alt="12">  </p>
<p>　　到了目前仍缺一个日式2D卡通的一个特性：<strong>边缘光（Rim）</strong>，一般为了表达物体处于光亮的环境下，属于光溢出的一种表达，有助于提升画面的层次感。实现原理也很简单：视角方向与法线点积，根据夹角系数取得当前视角下的模型边缘部分，为之加光即可。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">half VDotN = dot(viewDir, normal); <span class="comment">// 视角方向与法线点积，获取夹角系数</span></div><div class="line">VDotN = <span class="number">1</span> - saturate(VDotN); <span class="comment">// 取反，方便计算</span></div><div class="line"></div><div class="line">half v = smoothstep(_RimRange[<span class="number">0</span>], _RimRange[<span class="number">1</span>], VDotN); <span class="comment">// 与漫反射部分类似，做二值化，参考值为0.4-1</span></div><div class="line">v = step(<span class="number">0.5</span>, v); <span class="comment">// 小于0.5的部分都不要了</span></div><div class="line">v = v * _RimStrength; <span class="comment">// 设定边缘光强度，参考值为0.1</span></div><div class="line"></div><div class="line">color += color * v; <span class="comment">// 叠加</span></div></pre></td></tr></table></figure>
<p><img src="https://musoucrow.github.io/images/lbbn_shading/13.png" alt="13"><br>　　发光的构成大致如此，目前也许看起来不够明显，实是尚未调色所致，且看下文。</p>
<h2 id="调色"><a href="#调色" class="headerlink" title="调色"></a>调色</h2><p>　　先来看看目前的效果：<br><img src="https://musoucrow.github.io/images/lbbn_shading/14.png" alt="14"><br>　　首先是整体颜色风格不符合主题，这个场景属于有着岩浆的密室，应该符合昏暗以及灼热的色调，使用Split Toning进行调色：<br><img src="https://musoucrow.github.io/images/lbbn_shading/15.png" alt="15"><br>　　嗯，至少色调上像样了，但还是缺乏灼热的感觉，上Bloom看看：<br><img src="https://musoucrow.github.io/images/lbbn_shading/16.png" alt="16"><br>　　哎呀，看着只是稍微亮了点的样子，那是因为Bloom需要配合HDR使用，将颜色突破0-1的限制下进行运算，才能做到光溢出的效果：<br><img src="https://musoucrow.github.io/images/lbbn_shading/17.png" alt="17"><br>　　唔……这溢出的实在是有限，因为目前还处于Linear颜色空间，显示器对于颜色会进行处理，使得颜色之间的区间变小（明暗不明显），需要转成Gamma才能抵消之：<br><img src="https://musoucrow.github.io/images/lbbn_shading/18.png" alt="18"><br>　　成了，如此便得出了昏暗且灼热的场景风格，高对比度（亮者更亮、暗者更暗）的画面。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>　　这算是本人进入图形渲染的一个里程碑，感觉这的确是个美术活。技术不过是让你能进入赛道罢了，真正决定效果的还得看美术的理念。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt;欢迎参与讨论，转载请注明出处。&lt;/strong&gt;     &lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;　　本篇文章按理来说在三月便该发布了，因为插队
    
    </summary>
    
      <category term="Teach" scheme="https://musoucrow.github.io/categories/Teach/"/>
    
    
      <category term="Unity" scheme="https://musoucrow.github.io/tags/Unity/"/>
    
      <category term="Graphics" scheme="https://musoucrow.github.io/tags/Graphics/"/>
    
  </entry>
  
  <entry>
    <title>移植贪吃蛇——从C#到C++</title>
    <link href="https://musoucrow.github.io/2020/04/07/snake_cpp/"/>
    <id>https://musoucrow.github.io/2020/04/07/snake_cpp/</id>
    <published>2020-04-07T07:30:33.000Z</published>
    <updated>2020-05-10T14:06:52.492Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong>欢迎参与讨论，转载请注明出处。</strong>      </p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　因为某些机缘巧合，引起了我对C++的重视。一时兴起，决定将两年前用Unity写的<a href="https://github.com/MusouCrow/Snake" target="_blank" rel="external">Snake</a>进行移植。经过两周的抽空，总算是<a href="https://github.com/MusouCrow/SnakeCPP" target="_blank" rel="external">完成</a>了。项目采用现代C++标准编写，采用<a href="https://cmake.org" target="_blank" rel="external">CMake</a>构建，图形库为<a href="http://www.libsdl.org" target="_blank" rel="external">SDL</a>。由于本次的重点不在于图形这块，所以没有使用原版的素材，采用矩形代替。<br>　　在工程实现上除了基本的业务外，还实现了C#的<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/event" target="_blank" rel="external">event</a>以及的Unity的GameObject与Component。<br>　　本文将从C#开发者的角度出发比较C++的不同点，最后总结其思想。由于本人在此之前<strong>从未有</strong>C++的工程经验，对于许多特性在此之前也是一知半解，对于一些事物的理解若有误还请指教。</p>
<h2 id="低成本封装"><a href="#低成本封装" class="headerlink" title="低成本封装"></a>低成本封装</h2><p>　　首先最引我瞩目的便是C++的参数传递，形如这般的函数：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; title, <span class="keyword">int</span> width, <span class="keyword">int</span> height)</span></span>;</div></pre></td></tr></table></figure></p>
<p>　　由于C++的引用参数<code>string&amp;</code>性质，将值传入时不会发生拷贝，而是等于直接使用原变量。可以有效<strong>降低封装抽象的成本</strong>，加上<code>const</code>字段是为使得形如<code>&quot;123&quot;</code>这样的<strong>常量区对象</strong>也能传入。<br>　　当然这在C#也并不是没有，<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/ref" target="_blank" rel="external">ref</a>便是如此。但这在C#并不会下意识去用，毕竟在C++若是不用指针或引用作为参数的话可是会直接<strong>拷贝新对象</strong>的，而在C#直接使用也不会造成很大的负担（值类型直接拷贝，引用类型用指针）。<br>　　其次便是C++的内联函数了，作为函数宏的替代品之一。可以在编译时将函数展开为具体的内容，节省了一次函数调用的消耗。但内联函数需写在头文件中，若是关联项多，修改后便会增加编译时长。且展开量过大也会增大代码量，增加编译时长。但不失为一个降低封装成本的手段。</p>
<h2 id="明确的内存"><a href="#明确的内存" class="headerlink" title="明确的内存"></a>明确的内存</h2><p>　　其次与C#最大的不同便是对象的创建了，C++有着以下两种形式：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">A a = A();</div><div class="line">A* a = <span class="keyword">new</span> A();</div></pre></td></tr></table></figure></p>
<p>　　了解C++的自然晓得，前者在<strong>当前内存域下申请</strong>，后者<strong>在堆申请</strong>。而在C#则隐去了这个细节，而是设立固定的规则：</p>
<ul>
<li>引用对象使用指针，原则上在堆申请，若对象的生命周期存在于申请的函数里，则在栈申请——是为<strong>逃逸分析</strong>。</li>
<li>值对象在当前内存域下申请，且由于不是指针，变量传递会产生<strong>拷贝</strong>。除非使用ref、in、out等参数关键字。</li>
</ul>
<p>　　而C++的内存申请机制则带来了<strong>明确感</strong>，如在函数里申请生命周期只存在函数里的对象，需要明确的使用<code>A a = A();</code>方式。且在构建类的时候，对于那些不使用<code>A* a = new A();</code>创建方式的成员变量，其内存占用是<strong>明确的</strong>，在类对象申请内存的时候会一并申请，即这些成员变量在内存布局上可能是<strong>连续的</strong>。从这点来说可比C#要牛逼多了。</p>
<h2 id="相似的容器"><a href="#相似的容器" class="headerlink" title="相似的容器"></a>相似的容器</h2><p>　　在容器方面，C++与C#大体看起来是相似的，当然在API的爽度而言还是C#更胜一筹（C++17拉近了不少）。但实际上还是存在一些细节上的不同，就比如我们常用的Key-Value容器：C++的<a href="https://zh.cppreference.com/w/cpp/container/map" target="_blank" rel="external">std::map</a>与C#的<a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.collections.generic.dictionary-2?view=netcore-3.1" target="_blank" rel="external">Dictionary</a>在实现乃至功能上就不一样。实际上std::map对应C#的应该是<a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.collections.generic.sorteddictionary-2?view=netcore-3.1" target="_blank" rel="external">SortedDictionary</a>：它们都是基于红黑树实现，都是有序存储的表。而Dictionary则是基于哈希实现的，即我们俗称的哈希表，与之对应的是<a href="https://zh.cppreference.com/w/cpp/container/unordered_map" target="_blank" rel="external">std::unordered_map</a>。<br>　　通过命名能看出两种语言在这方面的倾向性：红黑树<strong>占用的内存更小</strong>，但查找和删除的时间复杂度都是<em>O(logn)</em>，而哈希查找和删除的时间复杂度都是<em>O(1)</em>。实际使用的时候感觉还是得权衡利弊，不能贪图方便就一直用一套。<a href="https://zh.cppreference.com/w/cpp/container/set" target="_blank" rel="external">std::set</a>与<a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.collections.generic.hashset-1?view=netcore-3.1" target="_blank" rel="external">HashSet</a>这边也是类似的对应，以此类推。<br>　　在序列容器方面的对应倒是工整：<a href="https://zh.cppreference.com/w/cpp/container/vector" target="_blank" rel="external">std::vector</a>对应<a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.collections.generic.list-1?view=netcore-3.1" target="_blank" rel="external">List</a>，都是不断扩容的数组容器。链表方面则是<a href="https://zh.cppreference.com/w/cpp/container/list" target="_blank" rel="external">std::list</a>对应<a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.collections.generic.linkedlist-1?view=netcore-3.1" target="_blank" rel="external">LinkedList</a>。但<a href="https://zh.cppreference.com/w/cpp/container/array" target="_blank" rel="external">std::array</a>却无对应了，硬要说的话就是与C#的原生数组对应，毕竟这个容器出现的意义就是弥补与C语言兼容的原生数组。<br>　　顺带一提，在使用std::vector时由于会出现<strong>扩容复制</strong>的问题，需要考虑好成员对象的拷贝方案，乃至于内存泄漏的问题。</p>
<h2 id="智能的指针"><a href="#智能的指针" class="headerlink" title="智能的指针"></a>智能的指针</h2><p>　　内存管理是所有编程语言都无法绕开的点，绝大多数编程语言对于堆内存的管理都是采用垃圾回收的方式。而在C++的鸿蒙时代则与C语言一样，需要手动管理<strong>指向堆内存</strong>的指针。尽管也有<a href="https://zh.cppreference.com/w/cpp/memory/auto_ptr" target="_blank" rel="external">std::auto_ptr</a>这样的东西，但在功能上还不够全面。而手动管理内存将难以解决对象在多处被引用时将如何安全销毁的问题，为了实现这种机制也得做出不少妥协。<br>　　所幸随着时代的发展，现代C++迎来了<a href="https://docs.microsoft.com/zh-cn/cpp/cpp/smart-pointers-modern-cpp?view=vs-2019" target="_blank" rel="external">智能指针</a>，它基于引用计数的规则，将裸指针包装起来，当符合销毁条件后便可自动回收。智能指针有着几种具体的类实现，而其中最常用的是<a href="https://zh.cppreference.com/w/cpp/memory/shared_ptr" target="_blank" rel="external">std::share_ptr</a>，当它持有指针时将增加计数，反之同理将减少计数，最终归0销毁。但其较之垃圾回收有个致命的缺陷：<strong>相互引用</strong>时将一直保持计数，无法销毁。为此C++引入了<a href="https://zh.cppreference.com/w/cpp/memory/weak_ptr" target="_blank" rel="external">std::weak_ptr</a>：它不会增加计数，在计数归0时持有指针也随之销毁。如此对于相互引用的情况下，分清主次，合理分配share_ptr与weak_ptr即可解决无法销毁的问题。<br>　　智能指针在使用上总有一种外挂的感觉，需要成体系的去使用。不如内置的垃圾回收式语言来的方便，且写起来还是有一定的心智负担（相互引用），不过在性能而言较之垃圾回收更为优越（回收对象与时机都很明确，且是被动进行的）。</p>
<h2 id="模板与泛型"><a href="#模板与泛型" class="headerlink" title="模板与泛型"></a>模板与泛型</h2><p>　　C++的模板与C#的泛型表面上用起来很是相似，实则有所不同。以下对比两者的差异：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T, <span class="keyword">int</span> x&gt; <span class="comment">// C++支持模板参数，可填写整型或指针</span></div></pre></td></tr></table></figure></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GenericList&lt;T&gt; <span class="keyword">where</span> T : Employee <span class="comment">// 使用System.Object不支持的方法时，需进行类型约束指定基类</span></div></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 这么骚的操作见过么？</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> ... Args&gt;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Do</span><span class="params">(Args... args)</span> </span>&#123;</div><div class="line">    f(args ...);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>　　从实际使用体验与两者的命名可以看出，「模板」的本质是<strong>参数化代码生成</strong>，而「泛型」则是<strong>类型参数化</strong>。即泛型只是模板功能的一部分而已。模板能实现的其他功能，在C#则以其他方式代替了（如变长参数<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/params" target="_blank" rel="external">params</a>）。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>　　从以上种种便能看出C++与C#在设计哲学上的不同，C#通过<strong>约束开发者行为</strong>从而达到<strong>更稳定健壮的结果</strong>，哪怕会失去一定的<strong>性能与灵活性</strong>，而C++则更依赖开发者<strong>自身的素质</strong>（如C++支持多重继承而C#仅仅支持单类+多接口继承）。<br>　　从个人的使用体验来看，现代C++并非不能作为业务开发语言。只是对开发者的素质要求较之一般语言更高，从招聘成本与项目稳定性而言是个问题。如此来看，除非有必要的性能敏感且需要一定封装的核心层（如游戏引擎），否则用C + 脚本语言或者C#/Java这类可上可下的语言是个更好的选择。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt;欢迎参与讨论，转载请注明出处。&lt;/strong&gt;      &lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;　　因为某些机缘巧合，引起了我对C++的重视
    
    </summary>
    
      <category term="Teach" scheme="https://musoucrow.github.io/categories/Teach/"/>
    
    
      <category term="C++" scheme="https://musoucrow.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Shader Graph踩坑实录</title>
    <link href="https://musoucrow.github.io/2020/03/08/shader_graph/"/>
    <id>https://musoucrow.github.io/2020/03/08/shader_graph/</id>
    <published>2020-03-08T09:41:18.000Z</published>
    <updated>2020-05-10T14:06:52.491Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong>欢迎参与讨论，转载请注明出处。</strong>      </p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　Demo也到了做渲染的时候了，经过一番鏖战后，算是大体完成了。但随着后续需求的到来，发现这套纯代码的Shader方案对于扩展、复用等方面有着诸多不便。于是便打起了<a href="https://unity.com/shader-graph" target="_blank" rel="external">Shader Graph</a>的主意……经过一番纠缠，于是有了本篇踩坑实录。另附<a href="https://github.com/MusouCrow/CustomShaderGraph" target="_blank" rel="external">源码地址</a>，但本篇并不会对其做讲解。基于Unity2020.1.0a20，渲染管线为URP7.18。</p>
<h2 id="优劣"><a href="#优劣" class="headerlink" title="优劣"></a>优劣</h2><p>　　首先要明确的是：Shader Graph不支持Builtin渲染管线，且尚未处于彻底成熟的阶段，哪怕是最新版本尚有不少缺陷。但瑕不掩瑜，且说其优劣：</p>
<ul>
<li>优点<ul>
<li>由于节点化与Sub Graph的存在，Shader的组装将变得相当容易，极大提升了模块化水平。</li>
<li>调整Property与Keyword变得相当方便，纯代码下将需要多些工序。</li>
<li>内置各种节点，降低了美术参与创作的门槛。</li>
<li>能够实时预览每个节点造成的变化预览，虽然对我而言没啥用。</li>
</ul>
</li>
<li>缺点<ul>
<li>编辑器尚不够稳定，经常会出现整个程序崩溃的情况。</li>
<li>生成的代码不够优化，比较暴力，存在各种分支判断、重复函数（也许最终会优化？）</li>
<li>由于Slot机制的原因，可能会出现很多运算集中在片元着色器中。</li>
<li>对于创建Pass并不友好，需要修改源码。</li>
</ul>
</li>
</ul>
<h2 id="来龙"><a href="#来龙" class="headerlink" title="来龙"></a>来龙</h2><p>　　其实一般的浅度Shader Graph使用者并不会如我这般踩这么多坑：直接使用内置的Graph模板进行创作即可。不幸的是，如前文所言：对于创建Pass并不友好，需要修改源码。于是便开始了踩坑之旅……<br>　　在默认情况下，Unity的Package将保存在工程的Library/PackageCache目录下，这样子是不能直接修改源码的（Library目录下的东西属于可再生物，随时会被覆盖），需将之搬迁至工程的Packages目录下。<br>　　对于考虑到日后Shader Graph的版本升级情况，所以尽可能的<strong>不要修改原工程的内容</strong>，而是尽量新建文件。但考虑到Shader Graph源码下存在不少inner元素，直接在外面写自己的内容也并非彻底可行。只能直接在Shader Graph包下进行添加文件的方式了，这也是要将之移至Packages目录的原因。<br>　　我要做的事情相当明确：<strong>新建一个自定义的Graph类型</strong>。在URP下已经自带Unlit与PBR两种类型了，于是本人便基于Unlit Graph并结合先前实现的Shader的特性进行新类型的创作。  </p>
<h2 id="去脉"><a href="#去脉" class="headerlink" title="去脉"></a>去脉</h2><p>　　我们能接触到Unlit Graph创建的起点便是Project区下右键菜单的<code>Create-&gt;Shader-&gt;Unlit Graph</code>了，直接在Shader Graph源码包下全局搜索<code>Create/Shader/Unlit Graph</code>即可找到：<br><img src="https://musoucrow.github.io/images/shader_graph/0.png" alt="0"><br>　　照葫芦画瓢在同目录下弄个新文件实现相同功能即可，这下我们便知道Unlit Graph的正主了：<code>UnlitMasterNode</code>。经过研究发现，它决定了在编辑器下Unlit Master Node的样式：<br><img src="https://musoucrow.github.io/images/shader_graph/1.png" alt="1"><br><img src="https://musoucrow.github.io/images/shader_graph/2.png" alt="2"><br>　　但这只是个壳子罢了，根据代码中的<code>IUnlitSubShader</code>为引，找到了其核心：<br><img src="https://musoucrow.github.io/images/shader_graph/3.png" alt="3"><br>　　这个<code>UniversalUnlitSubShader</code>的作用相当简单：根据编辑器的设置<strong>生成Shader代码</strong>。如上图便可看出定义Pass数据结构的行为，这也是诱使我来改源码的直接原因。在里面你将见到形如这般的代码：</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> unlitMasterNode = masterNode <span class="keyword">as</span> UnlitMasterNode;</div><div class="line"><span class="keyword">var</span> subShader = <span class="keyword">new</span> ShaderGenerator();</div><div class="line"></div><div class="line">subShader.AddShaderChunk(<span class="string">"SubShader"</span>, <span class="literal">true</span>);</div><div class="line">subShader.AddShaderChunk(<span class="string">"&#123;"</span>, <span class="literal">true</span>);</div><div class="line">subShader.Indent();</div><div class="line">&#123;</div><div class="line">    <span class="keyword">var</span> surfaceTags = ShaderGenerator.BuildMaterialTags(unlitMasterNode.surfaceType);</div><div class="line">    <span class="keyword">var</span> tagsBuilder = <span class="keyword">new</span> ShaderStringBuilder(<span class="number">0</span>);</div><div class="line">    surfaceTags.GetTags(tagsBuilder, <span class="string">"UniversalPipeline"</span>);</div><div class="line">    subShader.AddShaderChunk(tagsBuilder.ToString());</div><div class="line">    </div><div class="line">    GenerateShaderPass(unlitMasterNode, m_UnlitPass, mode, subShader, sourceAssetDependencyPaths);</div><div class="line">    GenerateShaderPass(unlitMasterNode, m_ShadowCasterPass, mode, subShader, sourceAssetDependencyPaths);</div><div class="line">    GenerateShaderPass(unlitMasterNode, m_DepthOnlyPass, mode, subShader, sourceAssetDependencyPaths);   </div><div class="line">&#125;</div><div class="line">subShader.Deindent();</div><div class="line">subShader.AddShaderChunk(<span class="string">"&#125;"</span>, <span class="literal">true</span>);</div></pre></td></tr></table></figure>
<p>　　如此情况便变得相当清晰了，只要清楚<strong>你想生成怎样的</strong>Shader代码，在摸熟了生成代码的API，便可自由地进行创作了。通过右键节点可以随时查看生成的代码情况：<br><img src="https://musoucrow.github.io/images/shader_graph/4.png" alt="4">  </p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>　　也许看似还算简单，但其中坑点还是有不少的：  </p>
<ul>
<li>不要尝试采用继承的形式去新建新类型，其本身代码就没打算让你这么做，必然会碰壁，除非改源码（如此便违反原则了）</li>
<li>做出了修改后，要到对应的Graph文件进行Save操作触发检测。</li>
<li>也许是检测的原因，有时候HLSL代码做出了修改后不会被识别到，需要换下行。</li>
<li>Shader Graph生成的着色器参数有着自己的一套处理方式，务必参考自带的代码。</li>
<li>Unlit Graph的主Pass并没有LightMode，想做背面Pass的时候要注意下。</li>
<li>Unlit Graph将渲染模式、混合模式、剔除做成节点设置并不是一个好选择（无法让材质修改），推荐按照URP的方式做成材质属性。<img src="https://musoucrow.github.io/images/shader_graph/5.png" alt="5"></li>
<li>Shader Graph对于生成的Shader代码存在分支数限制，需要到<code>Preference-&gt;Shader Graph</code>进行修改上限。值得一提的是，全局Keyword与局部Keyword似乎是分别对待的。</li>
<li>Shader Graph并不存在完整的环境，它是无法识别到一些渲染管线里的函数的。所以在编写Custom Shader的时候需要加上<code>#if SHADERGRAPH_PREVIEW</code>分支判定以处理在编辑模式下的情况：</li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">MainLight_float</span><span class="params">(float3 WorldPos, out float3 Direction, out float3 Color, out <span class="keyword">float</span> DistanceAtten, out <span class="keyword">float</span> ShadowAtten)</span></span></div><div class="line">&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> SHADERGRAPH_PREVIEW</span></div><div class="line">    Direction = float3(<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0</span>);</div><div class="line">    Color = <span class="number">1</span>;</div><div class="line">    DistanceAtten = <span class="number">1</span>;</div><div class="line">    ShadowAtten = <span class="number">1</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> SHADOWS_SCREEN</span></div><div class="line">    float4 clipPos = TransformWorldToHClip(WorldPos);</div><div class="line">    float4 shadowCoord = ComputeScreenPos(clipPos);</div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line">    float4 shadowCoord = TransformWorldToShadowCoord(WorldPos);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    Light mainLight = GetMainLight(shadowCoord);</div><div class="line">    Direction = mainLight.direction;</div><div class="line">    Color = mainLight.color;</div><div class="line">    DistanceAtten = mainLight.distanceAttenuation;</div><div class="line">    ShadowAtten = mainLight.shadowAttenuation;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>　　现在感觉游戏开发的未来方向就是连连看了，从这点来说UE4的确算是时代前沿。在编辑器里加入逻辑控制元素，让更多人能加入创作，尽可能地解放生产力，的确是游戏开发所需要的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt;欢迎参与讨论，转载请注明出处。&lt;/strong&gt;      &lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;　　Demo也到了做渲染的时候了，经过一番鏖
    
    </summary>
    
      <category term="Teach" scheme="https://musoucrow.github.io/categories/Teach/"/>
    
    
      <category term="Unity" scheme="https://musoucrow.github.io/tags/Unity/"/>
    
      <category term="Graphics" scheme="https://musoucrow.github.io/tags/Graphics/"/>
    
  </entry>
  
  <entry>
    <title>Unity骨骼动画的总结</title>
    <link href="https://musoucrow.github.io/2020/02/01/animation_guide/"/>
    <id>https://musoucrow.github.io/2020/02/01/animation_guide/</id>
    <published>2020-02-01T10:03:46.000Z</published>
    <updated>2020-05-10T14:06:52.488Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong>欢迎参与讨论，转载请注明出处。</strong>      </p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　恰逢假期，在家继续推进Demo，骨骼动画相关的调研算是告一段落了，遂以本文记录相关要点。<br>　　首先要明确一点，本文所说的骨骼动画皆是3D模型的骨骼动画，与2D精灵的骨骼动画无关，虽然原理大致相通。</p>
<h2 id="网格、骨骼、绑定"><a href="#网格、骨骼、绑定" class="headerlink" title="网格、骨骼、绑定"></a>网格、骨骼、绑定</h2><p>　　了解过3D相关知识的都知道，模型(Model)是由一个个三角形组成的，而这种三角形的学名则是网格(Mesh)。当然在DCC软件里为了方便创作，会用2个三角形组成四边形作为网格：<br><img src="https://musoucrow.github.io/images/animation_guide/0.png" alt="0"><br>　　然后便是骨骼(Skeleton)了，它是驱动模型运动的根本，如下图所示，这是一种彼此之间有父子关系连接在一起的长条状玩意：<br><img src="https://musoucrow.github.io/images/animation_guide/1.png" alt="1"><br>　　最后便是让模型跟着骨骼一起运动了，这个骨肉融合的过程称为<strong>绑定</strong>，具体要做的事便是将某节骨骼与相关的网格建立关系：<br><img src="https://musoucrow.github.io/images/animation_guide/2.png" alt="2"><br>　　如上图所示，模型上有着不同的颜色，这表示该节骨骼所影响到的网格权重值（蓝色为0，红色为1），所以绑定也俗称“刷权重”。权重值越高，该节骨骼对相应网格的影响便越大（存在多节骨骼对相同网格存在影响，此时便要通过权重值来决定优先级了）。<br>　　随着时代的发展，现代DCC软件基本配备自动刷权重的功能了。做好模型部件的划分（每个部件拥有独立的骨骼，通过各骨骼之间建立关系来联系模型），减少每个模型的权重复杂度，如此通过自动刷权重基本可以应对一般情况了。</p>
<h2 id="模型与动画"><a href="#模型与动画" class="headerlink" title="模型与动画"></a>模型与动画</h2><p>　　生成给Unity使用的模型与动画我选择FBX格式，毕竟这算是最流行的3D格式了。对于动画，我选择一个动画一个FBX文件的形式（业界也有全部做到一个文件里，在Unity内分割的行为），动画FBX文件里只有骨骼与动画信息，不含模型。<br>　　说到这里，便有一个绕不开的点：多个模型复用<strong>相同</strong>的动画，这里涉及到Unity里的两种骨骼动画模式：<strong>Generic与Humanoid</strong>。<br>　　Generic如其名般：一般的动画，在这种动画模式下实现复用的思想很朴素：只要模型的骨骼与动画的骨骼要素相同，那么复用便是水到渠成的事了。这也表示必须同类模型与动画的骨骼结构是<strong>一致</strong>的。这也表示难以使用外界的第三方资源，对于一些以拼凑、同人、大乱斗为特色的民间项目，或是想直接使用某游戏提取出来的动画，那便捉急了。<br>　　Humanoid则不然，这是一种专为人形设计的动画模式。如下图所示，它定义了人体通用的若干个关节点，将模型对应的骨骼填进去即可：<br><img src="https://docs.unity3d.com/uploads/Main/classAvatar-Inspector.png" alt="avatar"><br>　　事实上Humanoid便是做了一层中间层转换，让各自的人形模型的骨骼信息统一抽象为上图这套体系，并且还做了关节运动幅度的可控，如此便可实现复用了。且Unity实现了自动识别填充，使用起来还算方便。<br>　　但事实上我<strong>放弃</strong>了这种做法，选择了Generic模式。原因如下：</p>
<ul>
<li>Humanoid模式为了兼容不同体型下的情况，禁用了具有缩放行为的骨骼动画。</li>
<li>Humanoid模式只是为人形考虑，但实际上需要动画复用不只是人形。</li>
<li>由于Demo模型选用的是小泥人，并没多少合适的第三方动画选择（已尝试过）。</li>
<li>哪怕是人形，事实上也会有一些Humanoid无法顾及到的部件（如头发）。</li>
<li>既然不用第三方动画，那么骨骼结构的稳定性自然有保证。</li>
</ul>
<p>　　以上原因不是说用Humanoid模式就完全无法解决，But simple is good，Generic就完事了。</p>
<h2 id="Animator-切换、分层、混合树"><a href="#Animator-切换、分层、混合树" class="headerlink" title="Animator: 切换、分层、混合树"></a>Animator: 切换、分层、混合树</h2><p>　　时值2020年，<a href="https://docs.unity3d.com/Manual/class-Animator.html" target="_blank" rel="external">Animator</a>自然是动画组件的不二之选了。如下图所示般，构建动画状态机，实现一个有机的动画播放环境：<br><img src="https://docs.unity3d.com/uploads/Main/MecanimHowItFitsTogether.jpg" alt="animator"><br>　　首先要注意的是，<strong>不推荐将动画状态机当成单位业务的状态机使用</strong>，虽然动画状态机有提供挂载脚本的形式，但事实上单位的状态<strong>并不是与某个动画绑死的</strong>，应该由状态去播放动画，而非是动画下绑定专门的业务。让动画的归动画，状态的归状态吧！<br>　　在动画切换控制方面，我使用了Animator自带的<a href="https://docs.unity3d.com/Manual/AnimationParameters.html" target="_blank" rel="external">变量机制(Parameters)</a>，结合条件切换、动画状态脚本、代码控制等方式，实现动画的高可控切换。<br>　　如前文提到的动画复用问题，实际上哪怕骨骼主体相同，但仍会有各自的特殊部件，这时候便要用上Animator的<a href="https://docs.unity3d.com/Manual/AnimationLayers.html" target="_blank" rel="external">分层机制(Layers)</a>了。通过定义多个不同的层次，在层次中使用<a href="https://docs.unity3d.com/Manual/AnimationMaskOnImportedClips.html" target="_blank" rel="external">Avatar Mask</a>确定影响的骨骼部位，在层次中定义各个动画状态下对应的部件动画。可以为层次定义独立的动画状态机体系，也可以在设置中选中<em>Sync</em>启用以主体层为准的体系。个人更推荐后者，除非与本体动画无关。<br>　　最后是业界不少人士喜欢用的<a href="https://docs.unity3d.com/Manual/class-BlendTree.html" target="_blank" rel="external">混合树(Blend Trees)</a>，分为多种类型（不同的维度乃至于机制），原理为定义若干个动画，确定每个动画在变量组合的特定值下权重最大（播放优先级最高），如此通过操纵变量即可灵活混合相关动画（每个动画的元素都有一定的权重，最终混合成独特的动画）。本人暂时还没用到，主要是追求更明确的动画，而非那种融合的感觉。</p>
<h2 id="补间与帧动画"><a href="#补间与帧动画" class="headerlink" title="补间与帧动画"></a>补间与帧动画</h2><p>　　骨骼动画的本质，便是在不同的时间点为某节骨骼定义了特定的位置、缩放、旋转。动画的运作便是根据两个时间点之间的骨骼数据做数值变化，这种行为称之为<strong>补间(Tweens)</strong>，同理骨骼动画也就是一种补间动画。与补间动画相对应的概念是<strong>帧动画</strong>，帧动画只会在特定的时间点发生变化，时间点之间的运动途中是不变的，在许多经典的2D游戏动画便是这种做法。<br>　　为何我会提及到这点呢？一个很明显的区别：较之帧动画，补间动画显得实在是<strong>太流畅了</strong>，毕竟理论上游戏运作的每一帧它都在改变。但是流畅不是很好么？这一直是电子游戏的追求才对啊！在大多数情况下也许没错，但有时太过流畅，反而会失去「力量感」，说的再通俗点，就是<strong>没2D游戏内味了</strong>。我想这也是不少一般3D动作游戏做的不好的一点。<br>　　这种现象在日本动画业界运用3D时早有发现：由于2D手绘帧的标准是24帧每秒，而如果3D动画按照视频播放帧进行输出，就会显得两者仿佛根本不在一个世界般。故后来都选择了按照2D手绘帧的帧率进行抽帧，以此达到同步。当然哪怕如此，3D动画也是无法还原出2D手绘帧那股味的，一者在于手绘帧的每帧内容都是人为创作的，具有独特的节奏感。另者在于2D手绘帧的运动帧为了表达动感，往往会画成糊成一团的样子：<br><img src="https://musoucrow.github.io/images/animation_guide/3.gif" alt="3"><br>　　这种效果在3D动画基本上是难以实现的，所以往往会盖一层特效解决：<br><img src="https://musoucrow.github.io/images/animation_guide/4.gif" alt="4"><br>　　当然《塞尔达传说：荒野之息》对此的处理已经算是上乘了，特意选择了与武器本体颜色相近的特效，在形状上也与2D运动帧接近。个人认为可以在此基础上为武器加入短时间内夸张的形变，使之更有张力。这在《守望先锋》里也有相关运用，留待后日实践验证了。<br>　　言归正传，鉴于补间动画过于流畅的特性，为此我也类似日本动画业界的做法一般，按照24帧每秒的形式对动画播放进行了抽帧。实现思想也很简单：平时将Animator暂停，使用一个定时器，在特定时间点让Animator一次性把暂停的时间差更新补上。如下图对照所示（图1抽帧，图2没有）：<br><img src="https://musoucrow.github.io/images/animation_guide/5.gif" alt="5"><br><img src="https://musoucrow.github.io/images/animation_guide/6.gif" alt="6"><br>　　当然这种方式并不完美：真正的2D帧动画每一帧的持续时间都是人为确定的，而这样只是粗暴的抽帧罢了。当然人为确定帧时间的方式势必带来更高的人力成本，具体如何仍需取舍。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>　　关于「补间与帧动画」一节纯属个人看法，在正统3D派看来也许属于邪道也说不定（笑。骨骼动画涉及的相关种种实际远不止如此，如换装、部位组合动画等，限于篇幅，就不展开了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt;欢迎参与讨论，转载请注明出处。&lt;/strong&gt;      &lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;　　恰逢假期，在家继续推进Demo，骨骼动画
    
    </summary>
    
      <category term="Teach" scheme="https://musoucrow.github.io/categories/Teach/"/>
    
    
      <category term="Unity" scheme="https://musoucrow.github.io/tags/Unity/"/>
    
      <category term="Animation" scheme="https://musoucrow.github.io/tags/Animation/"/>
    
  </entry>
  
  <entry>
    <title>Unity光照模式的总结</title>
    <link href="https://musoucrow.github.io/2020/01/12/light_guide/"/>
    <id>https://musoucrow.github.io/2020/01/12/light_guide/</id>
    <published>2020-01-12T13:01:33.000Z</published>
    <updated>2020-05-10T14:06:52.491Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong>欢迎参与讨论，转载请注明出处。</strong>      </p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　近日在琢磨Demo应该选择怎样的光照模式，遂做了个试验：对比在同一场合下，各种模式的情况。故以此文记录之（版本为2019.2、平台为Standalone、渲染管线为Builtin）。</p>
<h2 id="环境光"><a href="#环境光" class="headerlink" title="环境光"></a>环境光</h2><p>　　环境光(Ambient)严格来说并不是一种光照，它只是单纯的为所有显示元素上色罢了。可以理解为2D游戏便是有个(255, 255, 255)环境光。可于<strong>(Window → Rendering → Lighting Settings)</strong>下的Environment Lighting进行设置。<br><img src="https://musoucrow.github.io/images/light_guide/0.png" alt="0"><br>　　环境光是无论如何都需要的，一般用于决定画面的底色。下图便是用了白色的效果：<br><img src="https://musoucrow.github.io/images/light_guide/1.png" alt="1"><br>　　看到上图便能理解我说的「环境光严格来说并不是一种光照」，毕竟连影子都没有，整个画面显得很单薄。但事实上在早期、以及现在一些不依赖光影的游戏是有这种做法的。它们一般会采用类似2D游戏的做法，在素材层面解决各种显示效果问题。对于不依赖光影、强调美术的绝对控制的游戏，使用纯环境光是个方案。<br>　　顺带一提，在Environment Lighting设置下的Gradient与Skybox模式有着不一样的效果，属于更高级的环境光实现。</p>
<h2 id="实时光"><a href="#实时光" class="headerlink" title="实时光"></a>实时光</h2><p>　　实时光(Realtime)顾名思义，就是每时每刻都在进行的光照。在<strong>Light组件的Mode属性设置为Realtime</strong>即是。实时光的优缺点很明显，如下：</p>
<ul>
<li>优点<ul>
<li>游戏时可随时改变光照的状态，即刻产生反应</li>
<li>随取随用，无需烘焙</li>
<li>光照效果最好</li>
</ul>
</li>
<li>缺点<ul>
<li>在正向渲染(Forward Rendering)下，画面同时出现多个光照时，开销较大</li>
<li>为了节能，某些设备、设置下，光照的数量有限</li>
</ul>
</li>
</ul>
<p>　　实时光一般就是开箱即用到的光照，效果如下：<br><img src="https://musoucrow.github.io/images/light_guide/2.png" alt="2"><br>　　可以看得出，各项消耗指标都比纯环境光要高，而该场景只有三项光照（平行光1个、聚光灯2个）。故一般游戏都不会如此奢侈，会采用各种手段来达到相同的效果。<br>　　而以上却还不是效果的极致，还差个全局光照(Global Illumination)呢。刚才所见的光照只是「直接的光照」罢了，它只会考虑到照到了谁便处理谁，没有从全局的角度去考虑。在开启全局光照后，除了直接光照之外，还会产生物件之间相互反射的<strong>间接光照</strong>。效果如下：<br><img src="https://musoucrow.github.io/images/light_guide/3.png" alt="3"><br>　　从画面效果来看变得更为深邃了，墙壁与地板都有了反射后的光渍，而各项指标实际上与局部并无不同（疑似）。使用它的前提是要在上文的Lighting Settings下开启<em>Realtime Global Illumination</em>，并且为静态物件做好<em>Static标记</em>。具体实现细节请自行查阅官方文档，在此不表。<br>　　当然，这并不代表全局光照优于局部光照，就比如有些游戏的画面风格并不喜欢那些全局光照带来的光渍。还是要看想要怎样的美术效果。</p>
<h2 id="烘焙光"><a href="#烘焙光" class="headerlink" title="烘焙光"></a>烘焙光</h2><p>　　烘焙光(Baked)可谓实时光的反面：根据光照信息预先渲染成贴图，最后盖到场景上。这个「根据光照信息预先渲染成贴图」的过程，是为<strong>烘焙</strong>。而烘焙的类型、算法、设置有着多样化的选择，直接影响烘焙的时长、效果、贴图大小与数量。也因烘焙的特性，只适用于静态物件（标记为Static的对象）。优缺点如下：</p>
<ul>
<li>优点<ul>
<li>部分渲染元素（取决于烘焙类型）没有实时运行的开销</li>
<li>属于全局光照，拥有间接光</li>
</ul>
</li>
<li>缺点<ul>
<li>光照属性不能运行时修改</li>
<li>动态物件不受影响</li>
<li>烘焙耗时</li>
</ul>
</li>
</ul>
<p>　　烘焙类型主要分三种，效果如下：<br><img src="https://musoucrow.github.io/images/light_guide/4.png" alt="4">Subtractive: 全烘焙<br><img src="https://musoucrow.github.io/images/light_guide/5.png" alt="5">Shadowmask: 烘焙阴影与间接光<br><img src="https://musoucrow.github.io/images/light_guide/6.png" alt="6">Backed Indirect: 只烘焙间接光  </p>
<p>　　可以看到效果是一个比一个好，但性能却是一个比一个耗。并且可以看出，由于烘焙设置的问题，效果是不如实时光的。而通过设置达到最优的话，烘焙时长则又是个问题了，鱼和熊掌不可兼得啊（砸钱便能我全都要）。<br>　　对于Subtractive，只需把Light组件的Mode属性设置为<strong>Baked</strong>即可。对于其余两种，实际上是一种实时光+烘焙光的混合方案，则需设置为<strong>Mixed</strong>。由于动态对象不受烘焙光影响的特性，Subtractive下的胶囊仔直接跟纯环境光时一个样了。解决方案有很多种，如采用Mixed方案（静态物件烘焙光、动态物件实时光）、<a href="https://docs.unity3d.com/Manual/LightProbes.html" target="_blank" rel="external">Light Probes</a>等。<br>　　顺带一提，关于Shadowmask，在阴影设置中可调为<strong>Distance Shadowmask</strong>。如此将取决于阴影距离的设置，在阴影距离内的阴影，将采用实时阴影，距离之外的则是烘焙阴影。也算是一种提升品质的方式吧。<br>　　烘焙光在业界的应用相当广泛，其中Subtractive式烘焙在早期游戏与现代手游可谓家常便饭，妥善使用Light Probes也能达到不俗的效果。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>　　以上只是本人粗略的实验与记录，实际上光照的内容浩如烟海，远非本篇所能涵盖。在光照方面本人也只能算是初学者，有所不对还请海涵，并欢迎指教。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt;欢迎参与讨论，转载请注明出处。&lt;/strong&gt;      &lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;　　近日在琢磨Demo应该选择怎样的光照模式
    
    </summary>
    
      <category term="Teach" scheme="https://musoucrow.github.io/categories/Teach/"/>
    
    
      <category term="Unity" scheme="https://musoucrow.github.io/tags/Unity/"/>
    
      <category term="Graphics" scheme="https://musoucrow.github.io/tags/Graphics/"/>
    
  </entry>
  
  <entry>
    <title>2019年度总结</title>
    <link href="https://musoucrow.github.io/2019/12/31/summary_2019/"/>
    <id>https://musoucrow.github.io/2019/12/31/summary_2019/</id>
    <published>2019-12-31T13:46:33.000Z</published>
    <updated>2020-05-10T14:06:52.492Z</updated>
    
    <content type="html"><![CDATA[<p>　　与前两年不同，今年可没有“不知不觉中，一年又过去了”的感觉。也许是上班了之后，对日子有了概念吧（毕竟元旦放假，笑）。同时与前两年相同，特作总结，以为归纳。<br>　　今年的Blog内容只有寥寥6篇，且全是DFQ相关。盖因10月之前都在紧张的开发中，实是无暇整点别的，希望明年有所不同吧。<br>　　若论今年最大的成就，自然是<a href="https://musoucrow.github.io/tags/DFQ/">DFQ</a>的完成了。相关事宜也在<a href="https://musoucrow.github.io/2019/10/17/dfq_end/">后记</a>有所总结。算是这些年来DNF同人的一张答卷吧。<br>　　除此之外，自然是利用这些年的积累，成功的找到了一份符合预期的工作。虽称不上惊艳，但也不差。在找工作期间也受到了不少业界同仁朋友的帮助，在此感谢。工作之后的最大好处便是生活作息规律了不少，至少不存在通宵了。其次是袋里也算有俩破钱，吃点买点都还凑合。在工作上也见识到不少业界才有的东西，并且深刻感受到了屎山、祖传代码、各种对接联调需求扯皮的滋味。也逐渐理解业界不少游戏明明肉眼可见的可调优项，却事实上没去改的现实。<br>　　主要原因在于，团队人数越多，意志的贯彻性就会越差。并且由于人多，野心也就愈大，需要做的杂七杂八也就愈多，不类独立游戏会专注于某项去做好。并且由于团队传承的关系，不免会存在换皮、祖传、屎山代码的现象。亦有可能熟悉这套玩意的核心成员已经不在而导致整体水平下滑，且由于规划、时间问题，没有成本去重构、推翻重做，这也是很无奈的事实。故工作后我最大的两点感受是：</p>
<ul>
<li>自己能白手写出某套东西并不算什么，能基于别人的东西去改出来那才是本事。</li>
<li>团队人愈多，工作流程（工具链、生产线、规章制度）就愈重要，这决定了团队生产力释放的多寡。并且人类之间的信息交接力其实很差，人多就不免要付出对接成本，这也是要通过工作流程去尽量减少的成本之一。</li>
</ul>
<p>　　说完工作的事，介于「生命不息，整活不止」的原则，新的整活计划自然如火如荼的进行中。如去年所言，需要在3D游戏开发方面发力。结果今年都在忙DFQ，有点惭愧。以上便是本人的2019年度总结，且待明年的Blog吧。<br>　　无双草泥马<br>　　2019.12.31</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　与前两年不同，今年可没有“不知不觉中，一年又过去了”的感觉。也许是上班了之后，对日子有了概念吧（毕竟元旦放假，笑）。同时与前两年相同，特作总结，以为归纳。&lt;br&gt;　　今年的Blog内容只有寥寥6篇，且全是DFQ相关。盖因10月之前都在紧张的开发中，实是无暇整点别的，希望
    
    </summary>
    
      <category term="Talk" scheme="https://musoucrow.github.io/categories/Talk/"/>
    
    
      <category term="Talk" scheme="https://musoucrow.github.io/tags/Talk/"/>
    
  </entry>
  
  <entry>
    <title>《DFQ》开发随录——后记</title>
    <link href="https://musoucrow.github.io/2019/10/17/dfq_end/"/>
    <id>https://musoucrow.github.io/2019/10/17/dfq_end/</id>
    <published>2019-10-17T03:18:18.000Z</published>
    <updated>2020-05-10T14:06:52.489Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong>欢迎参与讨论，转载请注明出处。</strong>      </p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　DFQ终究是顺利的开发完成，并在发布之后的短短四日内达到<strong>接近十万的下载量</strong>。赢得广大玩家的好评，甚者认为比之官方的手游<strong>品质更佳</strong>。然而这一切恍若黄粱一梦，于昨日晚上收到了来自腾讯的律师函，要求删除<strong>相关下载渠道与宣传内容</strong>。<br>　　取得这等成绩自是喜人，能被腾讯警惕也证明品质确实出色。只可惜游戏尚有一些待完善之处，无法再为玩家提供更新了。在此期间也有不少请求换皮合作的邀请，但本人志不在此。也不想讨论相关太多，就来为这个项目做个总结吧。</p>
<h2 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h2><p>　　关于制作DFQ的想法，在《阿拉德英雄传》3.0搁置以后便有了模糊的想法。认为要做一款简洁爽快的中小型DNF同人手游，作为我、以及开元的DNF同人最终章。但随着增长了见识以后，便发现自己的程序架构掌控力不足，于是花了不少时间恶补。且前期对于要做一款怎样的游戏并无清晰的概念，遂直到<strong>2018年6月</strong>才正式开始制作。<br>　　由于DFQ算是弥补3.0搁置的一个执念，于是依旧选择了<a href="http://love2d.org" target="_blank" rel="external">LÖVE</a>引擎。事实上这是个<strong>重大的决策失误</strong>。LÖVE关于移动端方面的功能只是刚刚推出，且是冷门引擎，没人帮忙踩坑。于是在制作时便遇到了很多问题，包括相关库的缺少或不合适以至于要造轮子、引擎本身的BUG之类等等。在发布之后更是遇到了诸多问题（NO GAME、全面屏、DPI等），在此奉劝各位，<strong>不要用冷门引擎</strong>。<br>　　说回程序本身，这次基本上是达到我的要求了，至少工程不再是一塌糊涂、难以协作的状态了。对于各种方面的写法问题也有过深刻的研究（如活动对象采用ECS架构），对于代码格式与写法也有了规范。不足之处在于状态的业务按理来说应该配置化，而非OOP，因其存在大量<strong>相似而不同</strong>的业务，而这些部分是难以用OOP解决的。以及在OOP的规范上，我引入了private（以_前缀表示），然而会发现很多时候这只会增加不必要的思考负担以及封装成本，这方面该如何处理其实至今我仍未有答案（在业界也是众说纷纭）。<br>　　为了弥补Lua没有强类型与智能提示的缺点，我引入了<a href="https://github.com/EmmyLua/VSCode-EmmyLua" target="_blank" rel="external">EmmyLua</a>。所以看过之前的开源工程的会发现代码会有形如<code>---@class XXX</code>的注释，不过这种外挂的形式终究不如原生来的爽快，且缺乏运行前检查的功能。对于代码健壮性的建设尚嫌不足，由此可见TypeScript才是究极的工程化脚本啊。<br>　　在后续测试的图中遇到过一次<strong>严重的内存泄漏</strong>事故，基本上刷到第三个地下城时便会内存膨胀到难以接受的地步。通过使用<a href="https://github.com/yaukeywang/LuaMemorySnapshotDump" target="_blank" rel="external">LuaMemorySnapshotDump</a>发现，由于我为了减少内存申请，会将一些固定的table类参数写成模块变量，而使用后却没有及时清空，导致游戏对象一直依附其中，无法回收。以及为了优化而做的对象池也是如此，真是汗颜。  </p>
<h2 id="美术"><a href="#美术" class="headerlink" title="美术"></a>美术</h2><p>　　美术方面可以说的不多，首先是由于因需求做了个<a href="https://github.com/MusouCrow/ParticleEditor" target="_blank" rel="external">粒子编辑器</a>，导致对粒子效果的掌控力上升。游戏的粒子特效使用率较之《阿拉德英雄传》有了大幅的提升。<br>　　在人物素材方面，实现了非常强大的纸娃娃，并且为了效率优化，纸娃娃是拼合成一张大图的，缺点在于合成相当耗时，需要在恰当的时机进行（如读图）。并且部分设备支持的图片大小最高为4096，而实际上则出现了超过该大小的图片（此问题至今尚未修复）。<br>　　在优化方面，由于引入了图集与压缩的措施，游戏的加载速度与显存占用是得到了极大的提升。在尚未采取压缩之前，小米9会出现显存带宽爆炸的情况。可以说安卓设备五花八门，令人十分头大。<br>　　UI方面，立绘依旧是小山龙同志的作品，质量较之当年可谓进步明显，原本打算采取live2d的方案，却因工期延宕而搁置了，实是一憾。至于界面本身，可以看出对于手游而言，连及格都称得上是勉强，实是因为一版过兼无经验所致。<br>　　手游UI与端游UI的不同处在于，由于屏幕太小，实际上UI要做的很大才显得正常。并且由于有着触控的需求，按钮也必须大且位置合适。如果为了美术效果而做得小，那也得必须要求附近无其他冲突项，且实际可触控范围要比素材看起来大才行。</p>
<h2 id="游戏性"><a href="#游戏性" class="headerlink" title="游戏性"></a>游戏性</h2><p>　　DFQ的原初想法实是一款刷刷刷的类暗黑游戏，但本人感觉这年头的游戏都过度强调养成了。遂在砍掉养成的前提下重新审视，定下了三国战纪+Roguelike的主基调。三国战纪的元素在于：角色扮演、街机闯关、拾取道具，Roguelike则是随机性了，可谓独立游戏时下的流行元素，当然大家不约而同选择Roguelike的原因很简单：游戏内容不足，所以要用随机性来增添耐玩性。这么一组合起来，DFQ的样子便很明显了：开局一把刀，一切全靠打，随机地图事件，横版街机闯关。<br>　　但是仅仅如此还是不够的，要是玩家一直用着一成不变的搭配进行游戏，那可就太浪费了。传统游戏对于此的解决方案有：上下级替换、针对性关卡替换，然DFQ没有条件搞上下级替换，针对性替换也未免苛刻。于是抄袭《塞尔达传说：荒野之息》的武器耐久度设定，让武器、道具、技能都具有轮替性。这份轮替性对于玩家而言实是辛辣了，以至于赢得不少吐槽。在后续版本中便为此做出了调整优化，但实是最佳之法。关键在于：玩家需要自己感到可控的设计，而非稀里糊涂的机制。DFQ在不少方面都有类似问题（如最初设想的动态难度），实该检讨。<br>　　在关卡设计上，DFQ是以传统游戏的标准进行设计的，做出了不少较之DNF的突破（如跨房间追击战、迷宫等）。在开发前期犯下一个严重的错误：以端游的标准去做手游，以至于难度过大。手游的操作成本比端游要大，以及更适合轻度的体验。传统的DNF操作方式并不够爽快，遂在此基础上加入了小技能可互相强制、普攻可减少技能冷却的设计，让整个游戏的体验如打了肾上腺素一般。<br>　　除此之外，在做《阿拉德英雄传》多年以来，落下不少错误的思想，如怪物的攻击频率相当鬼畜、没有合适的前后摇等。虽然较之当年，我的ACT设计理解有所提升，引入了反击元素，但仍是不足。在小草泥马的一番军训后，引入了紧张时间与舒适时间的概念，领悟了张弛有度的道理。怪物的设计上会做出提供玩家利用的破绽，让战斗的体验达到了业界平均水平（指国际）。  </p>
<h2 id="宣传"><a href="#宣传" class="headerlink" title="宣传"></a>宣传</h2><p>　　在此感谢轻声低语、瓦伦、夕阳飘羽三位同仁的协助，在DNF百度贴吧、COLG等处得到了极大的曝光，也感谢纷纷去安利、自发宣传的玩家们，以此得到了广泛关注。取得了<em>下载量近十万、B站宣传片十三万播放、贴吧关注量近七千、群人数两千七、COLG帖子47页</em>的成绩。<br>　　另外意想不到的是，以前《阿拉德英雄传》的玩家群体的活跃度也很高，并且开元工作室的名声也比想象中要大（不少人都知道，包括DNF吧的吧务），可见以前做下的成果也是有回报的。<br>　　其实在我看来，比较核心向的游戏，只要你知道受众的聚集地，并且有相关号召力的人士愿意帮忙。在赢得了核心玩家的认可下，宣传效果是非常棒的，哪怕远在韩国的好船同志也收到消息并通关了。这点和业界从广泛人群中捞玩家的买量游戏还是有所不同的。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>　　其实DFQ的成功，除了本身品质的优秀之外，更在于官方手游迟迟未发，当然最近又有动作了，这也算是撞枪口上了吧。且DFQ属于手游里少有的偏传统的单机类型，在玩腻了抽卡养成流水关卡的玩家看来，自然是十分闪耀的。而我之所以拒绝那些合作换皮的邀请，也在于我并没有想过符合游戏的商业化改造方案，如果按照市面上的那一套进行，结合下一次的天时地利人和，感觉迎来的只会是暴死吧。<br>　　经过这次的验证，可以见到我的ACT理解程度已经进入了新的台阶，然而这还不是我所能做到的极限，若有机会一定会再次整活。当然同人游戏是不会再做了，这次已经是撞倒了天花板，在各方面有其局限性。  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt;欢迎参与讨论，转载请注明出处。&lt;/strong&gt;      &lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;　　DFQ终究是顺利的开发完成，并在发布之后
    
    </summary>
    
      <category term="Development" scheme="https://musoucrow.github.io/categories/Development/"/>
    
    
      <category term="Development" scheme="https://musoucrow.github.io/tags/Development/"/>
    
      <category term="DFQ" scheme="https://musoucrow.github.io/tags/DFQ/"/>
    
  </entry>
  
  <entry>
    <title>《DFQ》开发随录——AI</title>
    <link href="https://musoucrow.github.io/2019/05/31/dfq_ai/"/>
    <id>https://musoucrow.github.io/2019/05/31/dfq_ai/</id>
    <published>2019-05-31T13:09:18.000Z</published>
    <updated>2020-05-10T14:06:52.489Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong>欢迎参与讨论，转载请注明出处。</strong>      </p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　DFQ是PVE（Player VS Environment）游戏，那么自然要有AI了。DFQ的AI实现并不算复杂，并没有用到时下流行的<a href="https://en.wikipedia.org/wiki/Behavior_tree" target="_blank" rel="external">行为树（Behavior Tree）</a>。原因在于不需要做到太精细的操作，且AI部分的业务不需要执行策划参与（不需要编辑器化）。本文将一一叙述其中要点，相信对于同类型的游戏也有一定的参考价值。</p>
<h2 id="宗旨"><a href="#宗旨" class="headerlink" title="宗旨"></a>宗旨</h2><p>　　AI设计的宗旨只有一个：<strong>根据游戏的各种情况，决定进行怎样的操作</strong>。这样的思路其实挺仿生的，我们玩游戏的时候本质上也是如此。要注意的是，玩家进行操作的方式是通过外设（键盘鼠标手柄触控等）输入操作信息（按键坐标等）。从这点来说，AI也可以这么做，以<strong>进行虚拟的输入操作</strong>。这么做的好处是很明显的，如此AI与玩家在功能上达到了一致，AI也不需要与某个具体的功能耦合，只需要关注相应的操作指令，<strong>无需关注具体的功能实现</strong>。<br>　　而这一切只需要做一套操作模块即可，并且做联机时来自其他玩家的输入亦可如此处理，通过这种方式达到了玩家、AI、联机三者的有机统一。可谓「软件开发中遇到的所有问题，都可以通过增加一层抽象而得以解决」的一次实践。<br>　　当然这也会引入新的问题：<em>某些功能只想AI拥有，那该怎么办？</em>DFQ中的非转向移动便属于这类，解决方法很简单：设计一个<strong>玩家无法触发的操作指令</strong>即可。</p>
<h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>　　AI的实体存在就是个类对象（下文称AI对象）而已，它会被外部调用的基础函数只有两个：Update和Tick。Update用于处理持续性的业务，而Tick则是一次性的业务，当然两者可能会有所结合（Tick接收参数，以驱动Update的运作）。<br>　　AI对象主要会存在的场合有：常驻（移动和攻击）、技能（判断是否应发动）、状态（某些状态下需要后续的操作），通过配置化的方式，即可灵活的组合需要的AI了：<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> &#123;</div><div class="line">    script = <span class="string">"base"</span>,</div><div class="line">    state = <span class="string">"attack"</span>,</div><div class="line">    ai = &#123;</div><div class="line">        script = <span class="string">"battleJudge"</span>,</div><div class="line">        collider = <span class="string">"duelist/goblin/skin/3-attack"</span></div><div class="line">    &#125;,</div><div class="line">    attackValues = &#123;</div><div class="line">        &#123;</div><div class="line">            damageRate = <span class="number">1</span>,</div><div class="line">            isPhysical = <span class="keyword">true</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　如上配置所示，这是个技能的配置。在AI部分选择了<code>battleJudge</code>类，并提供了用于判断范围的collider参数。如此便定下了该技能的AI方针：使用collider判断是否存在敌人，存在则按下技能对应的按键，以发动技能。</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>　　说完基本构成后，再来说说一些具体AI业务的实现吧。</p>
<ul>
<li>移动：移动AI的核心构成有三<ul>
<li>获取目标：遍历符合条件的对象，涉及到阵营等因素。</li>
<li>寻路：以目标为终点展开的寻路，由于DFQ使用的是网格地图，所以使用A星之类的寻路算法即可。</li>
<li>输入操作：获取到移动路径后，通过发出输入指令以驱动角色以之移动。要注意的是，这种方式不可能做到完全贴合路径，所以出现了超过了路径点的情况也不会作处理。</li>
</ul>
</li>
<li>攻击：攻击AI要做的事情很单纯，遍历技能以Tick它们的AI对象进行发动而已。要注意的是，技能的使用顺序要建立优先级进行排序。</li>
<li>判定：这个判定，便是上文的battleJudge了，通过collider以判断目标是否存在。这里的collider便是先前<a href="https://musoucrow.github.io/2019/04/30/dfq_hit/">打击感</a>所言的立体矩形，如下图所示：<br><img src="https://musoucrow.github.io/images/dfq_ai/collider.png" alt="collider"></li>
</ul>
<p>　　以上便是DFQ里值得一提的AI业务。顺带一提的是，AI是典型的不需要<strong>立即生效</strong>的业务，所以可以考虑每帧只执行一个单位的AI业务，以此减缓性能压力，并且避免敌人一窝蜂展开攻击的现象。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>　　在本文开篇时，输入AI二字的我其实有点恍惚。短短数年，AI几乎成了深度学习/机器学习的代名词了。在游戏领域一个理所当然的缩写反倒让我踌躇了一瞬，真是唏嘘啊。也许以后的游戏AI真的都成了基于强化学习的实现也说不定呢（笑。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt;欢迎参与讨论，转载请注明出处。&lt;/strong&gt;      &lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;　　DFQ是PVE（Player VS En
    
    </summary>
    
      <category term="Development" scheme="https://musoucrow.github.io/categories/Development/"/>
    
    
      <category term="Development" scheme="https://musoucrow.github.io/tags/Development/"/>
    
      <category term="DFQ" scheme="https://musoucrow.github.io/tags/DFQ/"/>
    
  </entry>
  
  <entry>
    <title>《DFQ》开发随录——打击感</title>
    <link href="https://musoucrow.github.io/2019/04/30/dfq_hit/"/>
    <id>https://musoucrow.github.io/2019/04/30/dfq_hit/</id>
    <published>2019-04-30T06:28:38.000Z</published>
    <updated>2020-05-10T14:06:52.489Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong>欢迎参与讨论，转载请注明出处。</strong>      </p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　对于动作游戏（<em>本文所谓的动作游戏具体指由FTG衍生而来的「超人系ACT」，如鬼泣、猎天使魔女等</em>）而言，打击感自然是重中之重，本篇就来讲讲DFQ的打击感实现思路吧。<br>　　首先要明确打击感的定义，本人将之定义为：<strong>攻击命中时产生的反馈</strong>。就这点而言，打击感并非是动作游戏的专属，凡是涉及到攻击交互的游戏都有。而动作游戏与之不同在于会对在攻击中附加控制效果（击退、击飞等），使得动作游戏成为了围绕打击感展开操作的游戏。<br>　　而DFQ的打击感基本源于DNF，在此基础上加入个人的理解，接下来便一一讲解其中构成。</p>
<h2 id="判定"><a href="#判定" class="headerlink" title="判定"></a>判定</h2><p>　　在产生攻击命中之前，自然得讨论如何触发了。众所周知，动作游戏讲究「所见即所得」——必须是看上去击中了，才算是命中。所以自然要使用一些方式去近似地模拟素材的边界范围，以此进行碰撞判定。而DFQ的做法则相当粗暴——直接构建一些近似的矩形，当然这矩形却不一般：<br><img src="https://musoucrow.github.io/images/dfq_hit/collider.png" alt="collider"><br>　　如图所示，人物拥有两种颜色的矩形，其中白色矩形表示人物的X-Z轴矩形，红色矩形表示为X-Y轴矩形。与一般的无纵深横版游戏（冒险岛、胧村正等）不同，DFQ这类可进行上下移动且滞空的横版游戏（DNF、三国战纪等）会去构造一种「逻辑上的三维空间」：<br><img src="https://musoucrow.github.io/images/dfq_hit/coordinate.png" alt="coordinate"><br>　　当然实际上可以直接使用3D矩形（立方体）进行构造，只是2D图形下不便表示，于是分解为两个矩形进行。自然地，判定时也是红对红、白对白。至于判定算法，由于DFQ没有太精细的需求，矩形不会参与旋转变换，故直接使用<a href="https://en.wikipedia.org/wiki/Minimum_bounding_box#Axis-aligned_minimum_bounding_box" target="_blank" rel="external">AABB</a>即可。  </p>
<h2 id="击退"><a href="#击退" class="headerlink" title="击退"></a>击退</h2><p>　　话不多说，直接上图：<br><img src="https://musoucrow.github.io/images/dfq_hit/stun.gif" alt="stun"><br>　　击退是打击感中最基本的元素了，当然将之命名为击退只是个人行为，在业界它有着各种各样的称呼，如stun、硬直、僵直、気絶等，在此一提。<br>　　由图可见击退有两种不同的姿势（为了表现的丰富度），敌人会保持被击姿势一段时间，且变速位移一段距离。以函数的形式表示便是<code>stun(time, speed, acceleration)</code>，time表示保持姿势的时间，speed为位移的初始速度，acceleration为速度的衰减值（也可以是加速值），通过acceleration来每帧减少speed，以此实现简单的变速运动效果。当然speed与acceleration并非是必须的（不带位移的击退），但time则必须有（无time不stun）。  </p>
<h2 id="击飞"><a href="#击飞" class="headerlink" title="击飞"></a>击飞</h2><p>　　同样，直接上图：<br><img src="https://musoucrow.github.io/images/dfq_hit/flight1.gif" alt="flight1"><br>　　与击退同样，击飞也属于动作游戏里最核心的控制效果之一，它的别名也很多，如flight、击倒、倒地、浮空等。<br>　　击飞这种控制效果在最初只是作为一种动画表现手法而已，一般用于敌人死亡、某些想表达击飞的招式等。敌人处于击飞动画时一般无法或难以继续进行互动。将之发展的据说是CAPCOM开发《鬼武者》时触发的一个BUG——敌人处于击飞时被后续攻击而产生了滞空效应。从此一发不可收拾，铸就日后《鬼泣》皇牌空战之名。<br>　　而DFQ身为2019年的游戏，自然不可能落后：<br><img src="https://musoucrow.github.io/images/dfq_hit/flight2.gif" alt="flight2"><br>　　以上两张图基本可以窥得击飞之全貌了：</p>
<ul>
<li>击飞在状态上可分为上升、下落、倒地，上升与下落都会进行类似击退的变速运动，且根据进度改变姿势。</li>
<li>姿势内容为击退的两个为基础外加它们的90度旋转版本及倒地。</li>
<li>在击飞时被攻击会切换姿势且保持滞空一小会，形成了浮空连击的效果。</li>
<li>除此以外便是X轴的位移效果了，这点与击退一致。</li>
<li>倒地会根据浮空高度结算出「再击飞」，画面表现上为落地弹起，若高度不足则直接倒地。</li>
</ul>
<p>　　与击退类似，击飞的基本函数形式则是<code>flight(speed_z, speed_x, acceleration_z_up, acceleration_z_down, acceleration_x)</code>，参数含义与击退类似，不再阐述。一般而言acceleration_z_up与acceleration_z_down会选择默认值，speed_x与acceleration_x则为可选项，但speed_z必须有（无speed_z不flight）。</p>
<h2 id="特效"><a href="#特效" class="headerlink" title="特效"></a>特效</h2><p>　　继续上图：<br><img src="https://musoucrow.github.io/images/dfq_hit/effect.gif" alt="effect"><br>　　特效其实没什么好说的，如果说动作姿势是描线，那么特效便是上色了。需要注意的是特效出现的位置一般得是矩形碰撞的交点处，这样才有「打中这个位置」的感觉。<br>　　特效的种类一般就是斩、打、突、气四类（利器、钝器、锐器、魔法），外加出血之类等等，多多益善。<br>　　顺带一提的是，由于特效算是一种创建销毁十分频繁的对象，值得为之做对象池以减少创建销毁的开销。</p>
<h2 id="声音"><a href="#声音" class="headerlink" title="声音"></a>声音</h2><p>　　这下上不了图了，毕竟声音的可视化形式一般人类都看不懂（笑。<br>　　由于打击感是攻击命中时产生的反馈，而反馈的形式自然不局限于视觉上的，听觉也相当的重要。当然这里讨论的声音可不仅仅是攻击瞬间产生的部分，还包括了整个招式过程。<br>　　一般而言，一个招式基本会包含以下元素：</p>
<ul>
<li>voice：如人物发招时的叫声，播放时机不限。</li>
<li>swing：如人物挥剑的声音、特效产生的声音，一般于运动帧时播放。</li>
<li>hitting：如刀砍到身上的声音，于命中时播放。</li>
<li>damage：敌人被攻击的惨叫声，于命中时播放。</li>
</ul>
<p>　　声音这部分在业界不少垃圾游戏可谓是偷工减料的重灾区，实际上万万不可忽视，毕竟有时候效果好不好就靠听个响（代表：拳皇）。  </p>
<h2 id="Hitstop、闪烁、抖动"><a href="#Hitstop、闪烁、抖动" class="headerlink" title="Hitstop、闪烁、抖动"></a>Hitstop、闪烁、抖动</h2><p>　　这仨放一块讨论是因为他们相辅相成：<br><img src="https://musoucrow.github.io/images/dfq_hit/battle.gif" alt="battle"><br>　　Hitstop这玩意我对其没有准确的中文词汇，业界一般称为硬直、僵直、卡肉等（可见多容易与击退混淆）。其定义如其名般：因hit而导致stop。表现形式为人物<strong>停止运动一段时间</strong>，这里的运动包括位移、动画之类。Hitstop是敌我双方皆有的，我称本体的Hitstop为Selfstop，敌方为Hitstop。由此可见，卡肉这个说法其实很恰当，感受起来就像是一下刀卡到肉里了。一般Hitstop的高低可以用于表示攻击的轻重，以及像内功拳法、一闪刀法等延迟杀伤效果也可以通过高Hitstop达成。<br>　　至于闪烁就更直白了，就是敌人表面有一层纯色遮罩渐变消失。值得注意的是，闪烁的运作也会受Hitstop影响，故在Hitstop期间闪烁是保持初始状态的，看起来敌人就是蒙上了一层白色。这么做可以使得命中的效果更为明显，在业界中《王者荣耀》也采用了这样的表现手法。<br>　　抖动在图中也许看不太出来，主要就是设定个时间值以及抖动范围（xa, xb, ya, yb），人物在时间内就会随机位移，形成抖动的效果。与闪烁同样，在Hitstop时间是不会流动的，所以抖动与闪烁类似，基本上便是用于加强Hitstop的表现力。在业界中CAPCOM的《吞食天地》也采用了这样的表现手法。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>　　以上只是打击感的一些机械的构成，实际上要做好打击感得充分利用许多元素，如场景震动、运镜、符合节奏的连击等。实际上它是一门导演的学问，要想培养就只能多抄多想多做。限于素材与平台，未能表现更丰富的元素，只能有待日后进军3D再说了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt;欢迎参与讨论，转载请注明出处。&lt;/strong&gt;      &lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;　　对于动作游戏（&lt;em&gt;本文所谓的动作游戏
    
    </summary>
    
      <category term="Development" scheme="https://musoucrow.github.io/categories/Development/"/>
    
    
      <category term="Development" scheme="https://musoucrow.github.io/tags/Development/"/>
    
      <category term="DFQ" scheme="https://musoucrow.github.io/tags/DFQ/"/>
    
  </entry>
  
  <entry>
    <title>《DFQ》开发随录——随机掉落</title>
    <link href="https://musoucrow.github.io/2019/03/31/dfq_drop/"/>
    <id>https://musoucrow.github.io/2019/03/31/dfq_drop/</id>
    <published>2019-03-31T06:39:46.000Z</published>
    <updated>2020-05-10T14:06:52.489Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong>欢迎参与讨论，转载请注明出处。</strong>      </p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　随机掉落可谓时下RPG的流行设定，DFQ自然也不例外。而掉落业务自然也有其值得细说之处，不然也就不会有本文了（笑）。接下来将一步步引申出随机掉落的实现演进。</p>
<h2 id="粗劣的实现"><a href="#粗劣的实现" class="headerlink" title="粗劣的实现"></a>粗劣的实现</h2><p>　　在以往的开发生涯中，对于掉落业务，我采取了很粗劣的实现：<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">local</span> random = <span class="built_in">math</span>.random() <span class="comment">-- 0-1</span></div><div class="line"><span class="keyword">local</span> pool <span class="comment">-- drop pool</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> (random &lt; <span class="number">0.1</span>) <span class="keyword">then</span></div><div class="line">    pool = pools.normal</div><div class="line"><span class="keyword">elseif</span> (random &lt; <span class="number">0.3</span>) <span class="keyword">then</span></div><div class="line">    pool = pools.rare</div><div class="line"><span class="keyword">else</span></div><div class="line">    pool = pools.other</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="keyword">local</span> index = <span class="built_in">math</span>.random(<span class="number">1</span>, #pool) <span class="comment">-- Choice one.</span></div><div class="line"><span class="keyword">local</span> item = pool[index] <span class="comment">-- Get an item.</span></div></pre></td></tr></table></figure></p>
<p>　　这种实现的槽点可谓数不胜数：掉落池的选取可谓暴力代码，而池中的道具也只能通过塞入相同的多份来扩充概率，对于概率的控制度很生硬。哪怕是将掉落池采取与道具相同的做法（将pools做成list）以去除暴力代码，对于概率控制度的问题依旧没有解决。且进行了两次取随机数，从概率而言并不纯粹。实际效果而言也导致了经常重复掉落，并不可取。</p>
<h2 id="Alias-Method"><a href="#Alias-Method" class="headerlink" title="Alias Method"></a>Alias Method</h2><p>　　那么如果选择将多个掉落池合而为一，使之只有一个list呢？<br>　　如此确实能让概率纯粹了，但是对于道具概率的控制度依然很差。这个问题可以通过构建道具概率表（<code>{a = 0.1, b = 0.5, ...}</code>）以生成掉落池（<code>{a, b, b, b,...}</code>）解决。但这样生成的掉落池未免也太大了（最后可能会达上千个元素），这太不环保了，那怎么办呢？<br>　　长达廿二年的人生经验告诉我：<em>我们做的绝大多数事情都是前人做过的，遇到不会的问题看看前人是怎么做的就对了</em>。果不其然，这就遇上了个合适的算法：<a href="https://blog.csdn.net/qq_33765907/article/details/79182355" target="_blank" rel="external">Alias Method</a>。<br>　　本文并不打算详解其中的奥妙，这是愚蠢的复读机行为。直接上代码：<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- items: A list of probability of item.</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Alias</span><span class="params">(items)</span></span></div><div class="line">    <span class="keyword">local</span> len = #items</div><div class="line">    <span class="keyword">local</span> alias = &#123;&#125;</div><div class="line">    <span class="keyword">local</span> probs = &#123;&#125;</div><div class="line">    <span class="keyword">local</span> small = &#123;&#125;</div><div class="line">    <span class="keyword">local</span> large = &#123;&#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> n=<span class="number">1</span>, len <span class="keyword">do</span></div><div class="line">        items[n] = items[n] * len</div><div class="line">        <span class="keyword">local</span> tab = items[n] &lt; <span class="number">1</span> <span class="keyword">and</span> small <span class="keyword">or</span> large</div><div class="line">        <span class="built_in">table</span>.insert(tab, n)</div><div class="line">    <span class="keyword">end</span></div><div class="line"></div><div class="line">    <span class="keyword">while</span> (#small &gt; <span class="number">0</span> <span class="keyword">and</span> #large &gt; <span class="number">0</span>) <span class="keyword">do</span></div><div class="line">        <span class="keyword">local</span> less = <span class="built_in">table</span>.pop(small) <span class="comment">-- Remove the first element of list and return it.</span></div><div class="line">        <span class="keyword">local</span> more = <span class="built_in">table</span>.pop(large)</div><div class="line"></div><div class="line">        probs[less] = items[less]</div><div class="line">        alias[less] = more</div><div class="line">        items[more] = items[more] - (<span class="number">1</span> - items[less])</div><div class="line"></div><div class="line">        <span class="keyword">local</span> tab = items[more] &lt; <span class="number">1</span> <span class="keyword">and</span> small <span class="keyword">or</span> large</div><div class="line">        <span class="built_in">table</span>.insert(tab, more)</div><div class="line">    <span class="keyword">end</span></div><div class="line"></div><div class="line">    <span class="keyword">while</span> (#small &gt; <span class="number">0</span>) <span class="keyword">do</span></div><div class="line">        probs[<span class="built_in">table</span>.pop(small)] = <span class="number">1</span></div><div class="line">    <span class="keyword">end</span></div><div class="line"></div><div class="line">    <span class="keyword">while</span> (#large &gt; <span class="number">0</span>) <span class="keyword">do</span></div><div class="line">        probs[<span class="built_in">table</span>.pop(large)] = <span class="number">1</span></div><div class="line">    <span class="keyword">end</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> alias, probs</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure></p>
<p>　　算法的代码量并不多，也就三十多行，输入参数<code>items</code>为道具的的概率list（<code>{0.1, 0.1, 0.5, ...}</code>），即代表需要配套的<code>paths</code>来表示对应的道具标识（<code>{&quot;stone&quot;, &quot;potion&quot;, &quot;gold&quot;, ...}</code>）。至于返回值<code>alias, probs</code>，先来看看获取随机掉落的代码：<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">local</span> index = <span class="built_in">math</span>.random(<span class="number">1</span>, #paths) <span class="comment">--- 1-n</span></div><div class="line">index = <span class="built_in">math</span>.random() &lt; probs[index] <span class="keyword">and</span> index <span class="keyword">or</span> alias[index]</div><div class="line"><span class="keyword">local</span> path = paths[index] <span class="comment">--- Item's path.</span></div></pre></td></tr></table></figure></p>
<p>　　以上代码很好理解，首先随机获取一个道具的索引，根据索引获取到<code>probs[index]</code>的值，与随机数（0-1）比较，由此可见probs存放的是一种运算后的概率值。若是随机数大于概率值，索引则改为<code>alias[index]</code>，由此可见alias存放的是一种与原索引相对应的新索引，而新的索引自然会有对应的道具。<br>　　如此我们便可理解这套算法的做法了：为每个道具设置一个概率值以及相对应的另一个道具，随机到一个道具后，仍需二次随机进行二选一。这么做很好理解，就是<strong>将一些高概率的道具填充到一些低概率的道具里</strong>：<br><img src="https://musoucrow.github.io/images/dfq_drop/example.png" alt="example"></p>
<p>　　如图所示的第二项紫色的占比（概率）为1，表示不需要进行二次随机了，如此即可保证整个掉落池的概率是可以平分干净的（多出的部分就作为1概率项）。不得不说这种做法十分绝妙，完美解决了先前做法中掉落池元素过大的问题，美中不足在于需要进行二次随机，相对破坏了概率的纯粹性，但由于只是二选一，实际上效果是可接受的。</p>
<h2 id="掉落池的维护"><a href="#掉落池的维护" class="headerlink" title="掉落池的维护"></a>掉落池的维护</h2><p>　　虽说Alias Method方案的掉落池配置变得相当容易，只需如此这般填写概率值即可，再分别生成items与paths：<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> &#123;</div><div class="line">    [<span class="string">"equipment/weapon/sword"</span>] = <span class="number">0.3</span>,</div><div class="line">    [<span class="string">"equipment/weapon/knife"</span>] = <span class="number">0.3</span>,</div><div class="line">    [<span class="string">"equipment/weapon/katana"</span>] = <span class="number">0.3</span>,</div><div class="line">    [<span class="string">"skill/flash"</span>] = <span class="number">0.1</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　然而实际上掉落项的种类与数量都相当的多，并且会时常更改。所以这般直接的配置是无法满足需求的，于是演进为：<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> &#123;</div><div class="line">    skill = &#123;</div><div class="line">        prob = <span class="number">0</span>,</div><div class="line">        item = &#123;</div><div class="line">            flash = <span class="number">1</span></div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    [<span class="string">"equipment/weapon"</span>] = &#123;</div><div class="line">        prob = <span class="number">0.9</span>,</div><div class="line">        item = &#123;</div><div class="line">            sword = <span class="number">0</span>,</div><div class="line">            knife = <span class="number">0</span>,</div><div class="line">            katana = <span class="number">0</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　新配置明显就方便了不少，若是概率填写为0则表示<strong>剩余总概率的平均值</strong>（<code>sword=0 =&gt; 0.9/3 =&gt; 0.3</code>），且填写的概率是<strong>相对于本层</strong>的（skill的总概率为0.1，故<code>flash=1 =&gt; 0.1</code>）。算是基于原配置进行了一波封装，可维护性大幅提升，如此便可面对变化频繁的需求了。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>　　本文所展示的掉落业务只是基础，在业界会有复杂度远超于此的需求（与时间、职业等因素挂钩，掉落池数量等），但DFQ的需求也仅此而已，期待日后能接触到更主流的设计。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt;欢迎参与讨论，转载请注明出处。&lt;/strong&gt;      &lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;　　随机掉落可谓时下RPG的流行设定，DFQ
    
    </summary>
    
      <category term="Development" scheme="https://musoucrow.github.io/categories/Development/"/>
    
    
      <category term="Development" scheme="https://musoucrow.github.io/tags/Development/"/>
    
      <category term="DFQ" scheme="https://musoucrow.github.io/tags/DFQ/"/>
    
  </entry>
  
  <entry>
    <title>在macOS搭建LÖVE for iOS平台</title>
    <link href="https://musoucrow.github.io/2019/03/01/build_love_ios/"/>
    <id>https://musoucrow.github.io/2019/03/01/build_love_ios/</id>
    <published>2019-02-28T16:09:12.000Z</published>
    <updated>2020-05-10T14:06:52.489Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong>欢迎参与讨论，转载请注明出处。</strong></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　继上回<a href="https://musoucrow.github.io/2018/08/24/build_love_android/">在macOS搭建LÖVE for Android平台</a>后，这次买了新的iPhone，对iOS平台的发布自然也要开始了。如上回一般，也发现了不少实操中会遇到的问题，特此记录，以便后人。</p>
<h2 id="实机调试"><a href="#实机调试" class="headerlink" title="实机调试"></a>实机调试</h2><p>　　LÖVE for iOS的编译可谓相当容易，前提是你必须拥有一台macOS以及iOS设备，并且安装了Xcode。如<a href="http://love2d.org/wiki/Getting_Started#iOS" target="_blank" rel="external">官方教程</a>所言般进行便是，大致上就是下载LÖVE源码工程，并且用Xcode打开<code>love/platform/xcode/love.xcodeproj</code>，然后选择love-ios项目、连上iOS设备、设置签名、然后Build就完事了。<br><img src="https://musoucrow.github.io/images/build_love_ios/0.png" alt="0"><br>　　如上图所示那便是签名的设置了，需要登录Apple账号作为Personal Team，并确保这是<strong>iOS设备所使用的账号</strong>。<br><img src="https://musoucrow.github.io/images/build_love_ios/1.png" alt="1"><br>　　签名设置完成无错误提示后，那便如上图所示般选择、执行即可。请确保iOS设备与macOS设备是处于<strong>连接</strong>状态的，过会便可见到iOS设备已将LÖVE安装完毕。此时尚无法直接运行，需要执行<code>设置→通用→设备管理→Apple账号→信任love</code>。<br>　　刚装好的LÖVE仍是空空如也，你可以选择打包好一个项目作为<code>test.love</code>，使用Apple的<em>隔空投送（AirDrop）</em>功能进行快速传输，如下图所示：<br><img src="https://musoucrow.github.io/images/build_love_ios/2.png" alt="2"><br>　　投送完毕后，iOS会精确的识别到这是LÖVE所需要的文件，于是你可以在LÖVE里见到它了，如下图所示：<br><img src="https://musoucrow.github.io/images/build_love_ios/3.png" alt="3"></p>
<h2 id="画面适配"><a href="#画面适配" class="headerlink" title="画面适配"></a>画面适配</h2><p>　　我所测试的项目的功能很简单：显示一张图片、该图片会拉伸至窗口大小。直接运行的效果如下图所示：<br><img src="https://musoucrow.github.io/images/build_love_ios/4.png" alt="4"><br>　　很明显可以得出两个问题：画面并不是水平的，以及顶部的状态栏没去掉。解决它俩的方法很简单，想要画面是水平的，就得在编译设置里进行更改，如下图所示：<br><img src="https://musoucrow.github.io/images/build_love_ios/5.png" alt="5"><br>　　如此即可，至于顶部的状态栏的去除，选择编译设置里的<code>Hide status bar</code>是无效的，因为LÖVE在游戏运行时又做了一次设置。而这个设置则是与引擎的<code>love.window.setFullscreen(fullscreen)</code>这个API有关，只需要在游戏运行时设置为全屏即可关闭状态栏。如此便没毛病了，如下图所示：<br><img src="https://musoucrow.github.io/images/build_love_ios/6.png" alt="6"></p>
<h2 id="开发调试"><a href="#开发调试" class="headerlink" title="开发调试"></a>开发调试</h2><p>　　在开发过程中需要不断地进行实机调试时，每次都对项目进行打包那效率未免也太低了。然而鉴于iOS的沙盒机制，又做不到如同Android般使用Git来进行同步工程。好在<code>*.love</code>文件本质上就是<code>*.zip</code>文件，如此开发一个对压缩包进行增量更新的脚本即可。如以下代码所示，用到了zip命令，脚本版本为Python3：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> datetime</div><div class="line"><span class="keyword">import</span> zipfile</div><div class="line"><span class="keyword">from</span> os.path <span class="keyword">import</span> realpath, dirname</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">listdir</span><span class="params">(path)</span>:</span></div><div class="line">    paths = []</div><div class="line">    lst = path.split(<span class="string">'/'</span>)</div><div class="line">    tree = file_tree</div><div class="line"></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(lst) - <span class="number">1</span>):</div><div class="line">        tree = tree[lst[i]]</div><div class="line"></div><div class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> tree:</div><div class="line">        v = tree[k]</div><div class="line">        p = k <span class="keyword">if</span> v <span class="keyword">is</span> <span class="keyword">True</span> <span class="keyword">else</span> k + <span class="string">'/'</span></div><div class="line">        paths.append(p)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> paths</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">zip</span><span class="params">(code)</span>:</span></div><div class="line">    os.system(<span class="string">"zip %s %s"</span> % (file_name, code))</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sync</span><span class="params">(path)</span>:</span></div><div class="line">    is_file_a = os.path.isfile(path)</div><div class="line">    is_dir_a = os.path.isdir(path)</div><div class="line"></div><div class="line">    info = path <span class="keyword">in</span> name_set <span class="keyword">and</span> zip_file.getinfo(path)</div><div class="line">    is_file_b = info <span class="keyword">and</span> <span class="keyword">not</span> info.is_dir()</div><div class="line">    is_dir_b = info <span class="keyword">and</span> <span class="keyword">not</span> is_file_b</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> is_file_a:</div><div class="line">        <span class="keyword">if</span> is_dir_b:</div><div class="line">            zip(<span class="string">'-d %s'</span> % path)</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> is_file_b:</div><div class="line">            time_a = os.stat(path).st_mtime</div><div class="line">            time_b = datetime.datetime(*info.date_time).timestamp()</div><div class="line"></div><div class="line">            <span class="keyword">if</span> abs(time_a - time_b) &gt; <span class="number">1</span>:</div><div class="line">                zip(path)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            zip(path)</div><div class="line">    <span class="keyword">elif</span> is_dir_a:</div><div class="line">        <span class="keyword">if</span> is_file_b:</div><div class="line">            zip(<span class="string">'-d %s'</span> % path)</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> is_dir_b:</div><div class="line">            list_a = os.listdir(path)</div><div class="line">            </div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(list_a)):</div><div class="line">                <span class="keyword">if</span> os.path.isdir(path + list_a[i]):</div><div class="line">                    list_a[i] = list_a[i] + <span class="string">'/'</span></div><div class="line"></div><div class="line">            list_b = listdir(path)</div><div class="line">            list_merger = list(set(list_a + list_b))</div><div class="line"></div><div class="line">            <span class="keyword">for</span> p <span class="keyword">in</span> list_merger:</div><div class="line">                sync(path + p)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            zip(path)</div><div class="line">            zip(<span class="string">'-r %s*'</span> % path)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">if</span> is_dir_b:</div><div class="line">            zip(<span class="string">'-d %s*'</span> % path)</div><div class="line">        <span class="keyword">elif</span> is_file_b:</div><div class="line">            zip(<span class="string">'-d %s'</span> % path)</div><div class="line"></div><div class="line">cwd = dirname(realpath(__file__))</div><div class="line">os.chdir(cwd)</div><div class="line"></div><div class="line">file_name = <span class="string">'game.love'</span></div><div class="line">zip_file = zipfile.ZipFile(file_name, <span class="string">'a'</span>)</div><div class="line">zip_file.close()</div><div class="line">name_set = set(zip_file.namelist())</div><div class="line">file_tree = &#123;&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> p <span class="keyword">in</span> name_set:</div><div class="line">    ls = p.split(<span class="string">'/'</span>)</div><div class="line">    tree = file_tree</div><div class="line">    length = len(ls)</div><div class="line"></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(length):</div><div class="line">        s = ls[i]</div><div class="line"></div><div class="line">        <span class="keyword">if</span> len(s) &gt; <span class="number">0</span>:</div><div class="line">            <span class="keyword">if</span> s <span class="keyword">not</span> <span class="keyword">in</span> tree:</div><div class="line">                tree[s] = <span class="keyword">True</span> <span class="keyword">if</span> i == length - <span class="number">1</span> <span class="keyword">else</span> &#123;&#125;</div><div class="line">            tree = tree[s]</div><div class="line"></div><div class="line">sync(<span class="string">'asset/'</span>)</div><div class="line">sync(<span class="string">'source/'</span>)</div><div class="line"><span class="comment"># ...</span></div></pre></td></tr></table></figure></p>
<h2 id="IPA发布"><a href="#IPA发布" class="headerlink" title="IPA发布"></a>IPA发布</h2><p>　　以上只能本机运行而已，若是想分享给他人，便要解决新的问题了。iOS的安装包为<em>.ipa</em>文件，你需要提供正式的<strong>开发者账号</strong>作为签名，方可生成之。开发者账号分为以下三种：</p>
<ul>
<li>个人账号<ul>
<li>只能提供单人使用</li>
<li>其他人若想运行ipa文件，需要注册其UDID</li>
<li>99美元/年</li>
</ul>
</li>
<li>公司账号<ul>
<li>允许多个开发者使用</li>
<li>需要填写公司的<strong>邓百氏编码(D-U-N-S Number)</strong></li>
<li>其他人若想运行ipa文件，需要注册其UDID</li>
<li>99美元/年</li>
</ul>
</li>
<li>企业账号<ul>
<li>允许多个开发者使用</li>
<li>需要填写公司的<strong>邓百氏编码(D-U-N-S Number)</strong></li>
<li>该账号下的APP<strong>不能</strong>发布到App Store</li>
<li>299美元/年</li>
</ul>
</li>
</ul>
<p>也就是说，除了企业账号以外，想轻松分享给他人是比较麻烦的。这方面可以考虑诸如<a href="https://www.pgyer.com" target="_blank" rel="external">蒲公英</a>一般的第三方签名平台，会更方便。<br>　　IPA的生成方式为Xcode下<code>Product→Archive</code>，然后根据指示进行即可。顺带一提，在编译设置中将<code>game.love</code>文件加入到APP资源里，变会默认直接运行该项目，以达到发布的效果。如下图所示：<br><img src="https://musoucrow.github.io/images/build_love_ios/7.png" alt="7"></p>
<h2 id="LuaJIT"><a href="#LuaJIT" class="headerlink" title="LuaJIT"></a>LuaJIT</h2><p>　　还有一个需要注意的问题是：Lua代码若是需要转为LuaJIT字节码，所选择的版本得是<code>LuaJIT 2.1.0-beta2 64bit</code>（在LÖVE 0.10.2下）。重点在于这个64位，由于Apple现行规定APP必须得是64位，于是连LuaJIT的字节码也必须同步。而想要生成64位的字节码，则必须编译出64位的LuaJIT，而这需要在编译时填写参数：<code>make CFLAGS=-DLUAJIT_ENABLE_GC64</code>。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>　　总的来说iOS平台较之Android在编译方面更为简单，毕竟是很稳定的平台与设施嘛。但在开发方面则有更多的繁文缛节，也算是福兮祸兮吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt;欢迎参与讨论，转载请注明出处。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;　　继上回&lt;a href=&quot;https://musouc
    
    </summary>
    
      <category term="Teach" scheme="https://musoucrow.github.io/categories/Teach/"/>
    
    
      <category term="LÖVE" scheme="https://musoucrow.github.io/tags/LOVE/"/>
    
      <category term="iOS" scheme="https://musoucrow.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>《DFQ》开发随录——随机地图</title>
    <link href="https://musoucrow.github.io/2019/01/30/dfq_map/"/>
    <id>https://musoucrow.github.io/2019/01/30/dfq_map/</id>
    <published>2019-01-30T10:38:24.000Z</published>
    <updated>2020-05-10T14:06:52.490Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong>欢迎参与讨论，转载请注明出处。</strong>      </p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　虽然先前未曾严明，但《DFQ》的全称为《DungeonFighterQuest》，由字面上便可得出，这是一款<a href="https://dnf.qq.com" target="_blank" rel="external">《DNF》</a>的同人游戏，那么《DFQ》的地图自然向《DNF》看齐了。而《DNF》的地图众所周知，具有一定的复杂度，在以往的作品开发过程中便是采取了手动制作的方式，可谓十分的费时费力。于是在《DFQ》便采用了生成随机地图的方式，与市面上许多独立游戏的做法不谋而合，毕竟手动做地图实在是太辛苦了（汗）。本文便记录其中心得。</p>
<h2 id="地图结构"><a href="#地图结构" class="headerlink" title="地图结构"></a>地图结构</h2><p><img src="https://musoucrow.github.io/images/dfq_map/map.png" alt="map"></p>
<p>　　如上图所示，这便是一张随机生成的地图，它拥有以下组成：</p>
<ul>
<li>远景层：地图最底的背景，图中表现为山水。</li>
<li>近景层：地图较近的背景，图中表现为树林。</li>
<li>边上层：地图的上边界，拥有若干地图物件。</li>
<li>地表层：地图的地板，图中表现为草地。</li>
<li>边下层：地图的下边界，拥有若干地图物件。</li>
<li>活动层：地图的主体，拥有若干活动的地图物件。</li>
</ul>
<p>　　在配置中以这种形式组成：<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> &#123;</div><div class="line">    info = &#123;</div><div class="line">        width = &#123;<span class="number">1440</span>, <span class="number">1280</span>, <span class="number">1024</span>&#125;, <span class="comment">-- 宽度随机选择</span></div><div class="line">        height = &#123;<span class="number">600</span>, <span class="number">736</span>&#125;, <span class="comment">-- 高度随机选择</span></div><div class="line">        theme = <span class="string">"lorien"</span>, <span class="comment">-- 地图主体</span></div><div class="line">        <span class="built_in">type</span> = <span class="string">"dungeon"</span>, <span class="comment">-- 地图类型</span></div><div class="line">        bgm = <span class="string">"lorien"</span>, <span class="comment">-- 背景音乐</span></div><div class="line">        bgs = <span class="string">"forest1"</span>, <span class="comment">-- 背景音效</span></div><div class="line">        name = &#123;</div><div class="line">            cn = <span class="string">"洛兰"</span>,</div><div class="line">            kr = <span class="string">"로리엔"</span>,</div><div class="line">            jp = <span class="string">"ロリエン"</span>,</div><div class="line">            en = <span class="string">"Lorien"</span></div><div class="line">        &#125; <span class="comment">-- 用于显示的地图名称，拥有中日韩英四语</span></div><div class="line">    &#125;,</div><div class="line">    floorHorizon = <span class="number">327</span>, <span class="comment">-- 地表层起始Y坐标</span></div><div class="line">    scope = &#123;</div><div class="line">        x = <span class="number">16</span>,</div><div class="line">        y = <span class="number">368</span></div><div class="line">    &#125;, <span class="comment">-- 可行走区域起始坐标</span></div><div class="line">    far = <span class="string">"$A/far"</span>, <span class="comment">-- 远景层</span></div><div class="line">    near = <span class="string">"$A/near"</span>, <span class="comment">-- 近景层</span></div><div class="line">    floor = &#123;</div><div class="line">        left = <span class="string">"$A/tile/0"</span>,</div><div class="line">        middle = <span class="string">"$A/tile/2"</span>,</div><div class="line">        right = <span class="string">"$A/tile/1"</span>,</div><div class="line">        bottom = <span class="string">"$A/tile/3"</span></div><div class="line">    &#125;, <span class="comment">-- 地表层</span></div><div class="line">    sprite = &#123; <span class="comment">-- 图片</span></div><div class="line">        up = &#123;</div><div class="line">            <span class="string">"$A/flower/0"</span></div><div class="line">            ...</div><div class="line">        &#125;, <span class="comment">-- 边上层</span></div><div class="line">        floor = &#123;</div><div class="line">            <span class="string">"$A/grass/0"</span>,</div><div class="line">            ...</div><div class="line">        &#125; <span class="comment">-- 地表层物件</span></div><div class="line">    &#125;,</div><div class="line">    actor = &#123; <span class="comment">-- 活动对象</span></div><div class="line">        down = &#123;</div><div class="line">            <span class="string">"$A/tree/0"</span>,</div><div class="line">            ...</div><div class="line">        &#125;, <span class="comment">-- 边下层</span></div><div class="line">        article = &#123;</div><div class="line">            <span class="string">"$A/tree/1"</span>,</div><div class="line">            ...</div><div class="line">        &#125; <span class="comment">-- 活动层</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　接下来将对逐层进行分析。</p>
<h2 id="远-近景层"><a href="#远-近景层" class="headerlink" title="远/近景层"></a>远/近景层</h2><p>　　远景层与近景层的机制完全一致，所以可以拿来一起说明。当然之所以会分为两个层次而非合并，是因为远景与近景关于摄像机移动时的相对移动速度不一样，以此形成<strong>纵深感</strong>。但在地图生成这一块，它们的机制是一致的：<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">far = <span class="string">"$A/far"</span>, <span class="comment">-- 远景层</span></div><div class="line">near = <span class="string">"$A/near"</span>, <span class="comment">-- 近景层</span></div></pre></td></tr></table></figure></p>
<p>　　它们都是加载一张图片，然后根据地图的宽度进行<strong>平铺</strong>操作即可。在最后阶段会<strong>渲染成一张成品长图</strong>，这是一种优化方法。</p>
<h2 id="边上层"><a href="#边上层" class="headerlink" title="边上层"></a>边上层</h2><p>　　边上层为地图的上边界，拥有若干地图物件。这里的地图物件与其他层的并不一样，在配置里它的划分是sprite，仅仅是单纯的图片罢了：<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">sprite = &#123; <span class="comment">-- 图片</span></div><div class="line">    up = &#123;</div><div class="line">        <span class="string">"$A/flower/0"</span></div><div class="line">        ...</div><div class="line">    &#125;, <span class="comment">-- 边上层</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　因为这些物件不需要与角色产生什么互动，最后也会如远/近景层一般，渲染成大块的成图。<br>　　关于物件的放置，会采取生成<strong>宽高为100的格子</strong>铺满整行，并随机在这些格子上放置物件，如下图所示：<br><img src="https://musoucrow.github.io/images/dfq_map/up.png" alt="up"></p>
<h2 id="边下层"><a href="#边下层" class="headerlink" title="边下层"></a>边下层</h2><p>　　边下层与边上层类似，但是生成的地图物件为活动对象(actor)：<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">actor = &#123; <span class="comment">-- 活动对象</span></div><div class="line">    down = &#123;</div><div class="line">        <span class="string">"$A/tree/0"</span>,</div><div class="line">        ...</div><div class="line">    &#125;, <span class="comment">-- 边下层</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　边下层的地图物件需要作为活动对象主要是因为某些物件会遮挡人物，所以需要采取靠近后透明化的措施。于是不方便作为单纯的图片。<br>　　物件放置方面与边上层一致，这里不再复述，如下图所示：<br><img src="https://musoucrow.github.io/images/dfq_map/down.png" alt="down"></p>
<h2 id="地表层"><a href="#地表层" class="headerlink" title="地表层"></a>地表层</h2><p>　　地表层即地图的地板，远/近景层类似，也是采取平铺的方针。但是在元素上更为多样：<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">floor = &#123;</div><div class="line">    left = <span class="string">"$A/tile/0"</span>,</div><div class="line">    middle = <span class="string">"$A/tile/2"</span>,</div><div class="line">    right = <span class="string">"$A/tile/1"</span>,</div><div class="line">    bottom = <span class="string">"$A/tile/3"</span></div><div class="line">&#125;, <span class="comment">-- 地表层</span></div></pre></td></tr></table></figure></p>
<p>　　地表层的图片分为左中右下四种，左右两种为于地图边缘进行<strong>随机选择（左/右或中）</strong>，中为默认选择，下为平铺Y方向。<br>　　除此之外，地表层还会拥有一些类似边上层的地图物件：<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">sprite = &#123; <span class="comment">-- 图片</span></div><div class="line">    floor = &#123;</div><div class="line">        <span class="string">"$A/grass/0"</span>,</div><div class="line">        ...</div><div class="line">    &#125; <span class="comment">-- 地表层物件</span></div><div class="line">&#125;,</div></pre></td></tr></table></figure></p>
<p>　　这些物件也是不会与人物有所交互，最终与整个地表层渲染成大图。与边上/边下层类似，地表层物件的放置会<strong>XY平铺宽高为64的格子</strong>，以此放置：<br><img src="https://musoucrow.github.io/images/dfq_map/floor.png" alt="floor"></p>
<h2 id="活动层"><a href="#活动层" class="headerlink" title="活动层"></a>活动层</h2><p>　　活动层即地图的主体，活动对象的放置层，诸如障碍、宝箱、怪物等皆置于此。放置的规则与地表层物件一致，与地表层物件的不同之处在于，活动层存在一些拥有障碍的物件：<br><img src="https://musoucrow.github.io/images/dfq_map/obstacle.png" alt="obstacle"></p>
<p>　　如上图所示，《DFQ》采用的障碍方式为传统的格子流，这种形式便于配合类似A星的寻路算法。但如此存在障碍格子与物件素材的匹配问题，这方面都需要手动设置好。以及需要警惕<strong>因障碍范围过大且恰好四周都是障碍物件围住了人物</strong>的情况，好在实际上并不存在这样的物件（障碍并不会很大），并不需要为此做特殊措施。</p>
<h2 id="随机问题"><a href="#随机问题" class="headerlink" title="随机问题"></a>随机问题</h2><p>　　在处理诸如物件放置的问题时，切忌采用遍历+随机数判断的形式。因为这是不符合概率论的（存在放置数量上限），如此便会导致地图左边的元素多于右边（右边存在轮不到的可能）。所以得采取将格子存储在一个list中，以<code>list[math.random(1, #list)]</code>的方式提取要放置的格子，如此即可保证几率均等了。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>　　对于一些需要个性添加的元素（地图特效、通行门、BOSS），一般会采取编写专门的处理函数进行添加。对于一些需要固定化的地图，也可以采取生成后输出成文件以加载使用。目前这套很明显的缺点在于无法生成崎岖不一的地形，不过目前暂无需求，且日后再看吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt;欢迎参与讨论，转载请注明出处。&lt;/strong&gt;      &lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;　　虽然先前未曾严明，但《DFQ》的全称为《
    
    </summary>
    
      <category term="Development" scheme="https://musoucrow.github.io/categories/Development/"/>
    
    
      <category term="Development" scheme="https://musoucrow.github.io/tags/Development/"/>
    
      <category term="DFQ" scheme="https://musoucrow.github.io/tags/DFQ/"/>
    
  </entry>
  
  <entry>
    <title>2018年度总结</title>
    <link href="https://musoucrow.github.io/2018/12/31/summary_2018/"/>
    <id>https://musoucrow.github.io/2018/12/31/summary_2018/</id>
    <published>2018-12-31T14:04:28.000Z</published>
    <updated>2020-05-10T14:06:52.492Z</updated>
    
    <content type="html"><![CDATA[<p>　　不知不觉中2018年即将过去了，与<a href="https://musoucrow.github.io/2017/12/31/summary_2017/">去年</a>相同，特作总结，以为归纳。<br>　　今年的Blog总共写了14篇，较之去年的13篇算是相差不大。但内容方面则更为单纯了，简要说来便是：DFQ、网络同步、ECS、实践记录。期望明年能有新的花样。<br>　　今年的主要成果为对网络同步的涉猎，在帧锁定同步方面有<a href="https://github.com/MusouCrow/BrickAndBall" target="_blank" rel="external">《Brick &amp; Ball》</a>，在FPS/TPS同步方面有<a href="https://github.com/MusouCrow/TPSDemo" target="_blank" rel="external">TPSDemo</a>。收获了不少同仁的赞可，但都算不上是正式项目的实践，只能有待机会了。<br>　　项目方面，《DFQ》的开发也算是正式进行了，这将是明年的总旋律。与今年类似，如无特殊情况则保持月更相关Blog。待最终完工开源后（也许）将会是一个很好的学习素材。<br>　　平常时刻也有与ChawDoe进行一些作业方面的研究，涉及到诸如强化学习、哈希表、寻路算法、词法分析、UNIX/POSIX API、OpenGL等方面，也是获益良多，作为巩固基础了。<br>　　总的来说，愈发感觉到计算机图形学是自己的待恶补项，以及3D游戏开发中的不少方面也值得实践，这将是明年的发展方向，期望在这些方面能有所建树，作出一些心得分享。<br>　　以上便是本人的2018年度总结，今年下半年以来的社会经济状况不是很好，祈祷明年能够回暖吧。<br>　　无双草泥马<br>　　2018.12.31</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　不知不觉中2018年即将过去了，与&lt;a href=&quot;https://musoucrow.github.io/2017/12/31/summary_2017/&quot;&gt;去年&lt;/a&gt;相同，特作总结，以为归纳。&lt;br&gt;　　今年的Blog总共写了14篇，较之去年的13篇算是相差不大
    
    </summary>
    
      <category term="Talk" scheme="https://musoucrow.github.io/categories/Talk/"/>
    
    
      <category term="Talk" scheme="https://musoucrow.github.io/tags/Talk/"/>
    
  </entry>
  
  <entry>
    <title>《DFQ》开发随录——ECS</title>
    <link href="https://musoucrow.github.io/2018/12/27/dfq_ecs/"/>
    <id>https://musoucrow.github.io/2018/12/27/dfq_ecs/</id>
    <published>2018-12-26T16:56:09.000Z</published>
    <updated>2020-05-10T14:06:52.489Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong>欢迎参与讨论，转载请注明出处。</strong>      </p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　在阅读本文之前，你需要了解一下何为<a href="https://en.wikipedia.org/wiki/Entity–component–system" target="_blank" rel="external">ECS框架</a>，今年年初本人也对此进行了<a href="https://musoucrow.github.io/2018/03/19/ecs_first/">相关研究</a>。到了实际开发时发现确实有此需求，遂应用之。本文便记录其中心得。</p>
<h2 id="ECS的意义"><a href="#ECS的意义" class="headerlink" title="ECS的意义"></a>ECS的意义</h2><p>　　在讨论实现细节之前，首先要弄明白一个关键问题：<strong>为何要用ECS？</strong> 对于我而言，使用ECS的意义在于使用传统OOP方式构造一个<strong>高度复杂的对象集</strong>时异常困难。在我看来，高度复杂的对象集即「多衍生物、衍生物之间多多少少拥有些共性」的存在。游戏中于地图上活跃的对象便是如此，拥有多种形式（物体、特效、子弹、NPC、怪物……），而这些衍生物之间多多少少会拥有一些共性（怪物和NPC都要寻路），如何组织安排好这些功能是很麻烦的一件事。在以往的开发生涯中，这部分我重构过很多遍，尝试过各种形式（将通用的功能做成子对象之类的），最终发现：<strong>ECS便是解决此问题的绝佳利器</strong>。</p>
<h2 id="实现要素"><a href="#实现要素" class="headerlink" title="实现要素"></a>实现要素</h2><p><img src="https://musoucrow.github.io/images/dfq_ecs/relationship.png" alt="relationship"></p>
<p>　　上图便是本项目ECS框架的结构了，大致介绍一二：</p>
<ul>
<li>Entity（实体）: Entity是对象的主体，Component的容器，在数据结构的形式上就是个哈希表。</li>
<li>Component（组件）: Component是数据的容器，与Data对接，提取相关数据。Component的形式多样，如Transform、Aspect、Input等。Component只有构造函数。</li>
<li>Data（数据）: 来自配置文件，其中定义了各Component的配置所需。可由Manager将Data作为参数创建Entity。</li>
<li>Group（群组）: Group以Component作为条件筛选出合适的Entity集合，如此便可使符合条件的Entity运作相应的业务。</li>
<li>System（系统）: 业务运作的主体，以Group进行筛选出合适的Entity以执行相应的业务。分为<code>Enter, Init, Exit, Update, LateUpdate, Draw</code>六个业务函数。System的形式多样，如Drawing、Life、Battle等。</li>
<li>Lib（库）: 存放通用业务函数之处，原则上以具体所需Component为参数，而非Entity，如<code>Hitstop(attacker, identity, time)</code>。如此是为明确函数调用条件，以及可以使Component分别来自不同Entity，实现一些特殊需求。Lib的形式多样，如AI、Battle、Effect等。</li>
<li>Manager（中枢）: 负责Group与Entity的管理，如<code>AddComponent, DelComponent, NewGroup, NewEntity</code>等。</li>
<li>Executor（执行）: 整套系统的执行者，负责导入System，定义System的执行顺序以及提供System的执行场所。</li>
</ul>
<h2 id="使用演示"><a href="#使用演示" class="headerlink" title="使用演示"></a>使用演示</h2><p>　　以上便是ECS框架的组成元素了，接下来展示一下使用场景：<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- attributes.lua</span></div><div class="line"></div><div class="line"><span class="keyword">local</span> _ATTRIBUTE = <span class="built_in">require</span>(<span class="string">"actor.lib.attribute"</span>) <span class="comment">-- Lib</span></div><div class="line"></div><div class="line"><span class="keyword">local</span> _Timer = <span class="built_in">require</span>(<span class="string">"util.gear.timer"</span>)</div><div class="line"><span class="keyword">local</span> _Base = <span class="built_in">require</span>(<span class="string">"actor.system.base"</span>)</div><div class="line"></div><div class="line"><span class="keyword">local</span> _Attributes = <span class="built_in">require</span>(<span class="string">"core.class"</span>)(_Base) <span class="comment">-- System</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> _Attributes:Ctor<span class="params">(upperEvent)</span></span></div><div class="line">    <span class="comment">-- Filter</span></div><div class="line">    _Base.Ctor(self, upperEvent, &#123;</div><div class="line">        battle = <span class="keyword">true</span>,</div><div class="line">        attributes = <span class="keyword">true</span></div><div class="line">    &#125;)</div><div class="line"></div><div class="line">    self._timer = _Timer.New(<span class="number">1000</span>)</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> _Attributes:Update<span class="params">(dt)</span></span></div><div class="line">    self._timer:Update(dt)</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">not</span> self._timer.isRunning) <span class="keyword">then</span></div><div class="line">        <span class="comment">-- List is from group.</span></div><div class="line">        <span class="keyword">for</span> n=<span class="number">1</span>, self._list:GetLength() <span class="keyword">do</span></div><div class="line">            <span class="keyword">local</span> e = self._list:Get(n) <span class="comment">-- Entity</span></div><div class="line">            <span class="comment">-- Component of Battle</span></div><div class="line">            <span class="keyword">if</span> ((e.battle <span class="keyword">and</span> <span class="keyword">not</span> e.battle.isDead) <span class="keyword">or</span> <span class="keyword">not</span> e.battle) <span class="keyword">then</span></div><div class="line">                <span class="keyword">local</span> attributes = e.attributes <span class="comment">-- Component of Attributes</span></div><div class="line">                _ATTRIBUTE.AddHp(attributes, attributes.hpRecovery)</div><div class="line">                _ATTRIBUTE.AddMp(attributes, attributes.mpRecovery)</div><div class="line">            <span class="keyword">end</span></div><div class="line">        <span class="keyword">end</span></div><div class="line"></div><div class="line">        self._timer:Enter()</div><div class="line">    <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="keyword">return</span> _Attributes</div></pre></td></tr></table></figure></p>
<p>　　可以看到，这是属性相关的System，它提供了每秒回复HP与MP的业务。拥有Battle与Attributes组件的Entity方可执行，并且了ATTRIBUTE这个Lib的函数。采用这种形式只需要将业务分割为一个个System，以不同的Component组成游戏对象即可达到极高的灵活度。对于高度复杂的对象集而言可谓绝佳的解决方案。</p>
<h2 id="子对象问题"><a href="#子对象问题" class="headerlink" title="子对象问题"></a>子对象问题</h2><p>　　在开发的过程中，总会遇到诸如状态、技能、BUFF之类需要以子对象形式存在的情况。为此应当如何实现是ECS框架绕不开的一个问题。我曾尝试为他们也纳入至ECS框架中，但是这样会使得System的数量膨胀，而且并没有带来什么明显的好处（它们的独立性很高）。也曾试过为它们弄二级ECS框架，但感觉很刻意死板。最终领悟到了一点：<strong>ECS框架对我而言的意义，只是降低构建对象的复杂度，若是对象本身的复杂度并不高，采用OOP的方式完全可以接受</strong>。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>　　ECS框架我只用在了地图对象，其余部分（如UI）等都是采用传统的面向对象形式，因为他们的构成复杂度并不高，切忌犯了“为用而用”的错误。当然对于Unity那边而言，ECS的意义在于达到高性能（内存连续、非GC、高Cache命中率、多线程），这时候为了高性能是不得不用了。当然Unity的ECS框架我所涉猎并不多，有待后日挖掘。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt;欢迎参与讨论，转载请注明出处。&lt;/strong&gt;      &lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;　　在阅读本文之前，你需要了解一下何为&lt;a 
    
    </summary>
    
      <category term="Development" scheme="https://musoucrow.github.io/categories/Development/"/>
    
    
      <category term="Development" scheme="https://musoucrow.github.io/tags/Development/"/>
    
      <category term="DFQ" scheme="https://musoucrow.github.io/tags/DFQ/"/>
    
  </entry>
  
  <entry>
    <title>TPS游戏网络同步总结</title>
    <link href="https://musoucrow.github.io/2018/12/02/tps_sync/"/>
    <id>https://musoucrow.github.io/2018/12/02/tps_sync/</id>
    <published>2018-12-02T13:45:51.000Z</published>
    <updated>2020-05-10T14:06:52.492Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong>欢迎参与讨论，转载请注明出处。</strong>      </p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　因友人的项目要做TPS联机对战游戏，本人遂对此进行了一番研究，经过四回的辗转反侧，<a href="https://github.com/MusouCrow/TPSDemo.git" target="_blank" rel="external">Demo</a>总算是做出来了。本次Demo是C/S一体化的设计，即服务端也是Unity做的（可选择1P兼任服务器或者将Unity以命令行模式运行于服务器）。网络模块采用了UDP+KCP，即先前<a href="https://github.com/MusouCrow/BrickAndBall.git" target="_blank" rel="external">BNB</a>的强化版，而之所以没用UNet是因为之前搞出了乌龙所以换了现在这套，但序列化部分还是用的UNet。以上只是背景交代，本文仅聚焦于网络同步方面的细节。</p>
<h2 id="实现思想"><a href="#实现思想" class="headerlink" title="实现思想"></a>实现思想</h2><p>　　如果你对这方面有所涉猎，想必大致了解何为<strong>状态同步</strong>。市面上的大多文章将其与帧锁定同步对立而论，但本人认为两者并非是对立的存在，关于这点<a href="https://zhuanlan.zhihu.com/p/32843758" target="_blank" rel="external">这篇文章</a>讲的非常清楚，希望读者不要拘泥于形式。在阐述详细的实现思想之前，我们先来看看FPS/TPS游戏的需求：</p>
<ul>
<li>非常迅速的操作反馈（若采用服务器应答后方有反馈的设计，很难达到要求，尤其是操作镜头） → <strong>本地先行</strong></li>
<li>个人体验第一（对于是否命中敌人与被命中不是很敏感） → <strong>玩家之间看到画面情况不一致</strong></li>
<li>ACT元素低（不存在ACT游戏的打击控制链，不需要帧判定） → <strong>不需要精确到帧的同步</strong></li>
<li>服务器权威（命中判定由服务器决定） → <strong>服务端模拟游戏世界、同步验证</strong></li>
<li>房间战斗（玩家人数不多） → <strong>与MMORPG同步不同</strong></li>
<li>相对同步（玩家之间的时间差不可拉得太大） → <strong>追赶进度</strong></li>
</ul>
<p>　　Well done，由以上几点需求已经得出了TPS游戏同步的实现思想，下文将根据实现思想阐述具体实现细节。</p>
<h2 id="快照"><a href="#快照" class="headerlink" title="快照"></a>快照</h2><p>　　在探究同步流程之前，首先要了解同步的核心：快照。换言之，也就是我们所同步的内容。快照（Snapshot）通俗来讲就是玩家的操作指令与相关数据的集合，由于需要做<strong>同步验证</strong>，所以将数据分为必要数据(Must)与验证数据(Check)，先来看看移动的快照数据结构吧:<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Actor/Common.cs</span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Move</span> &#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">string</span> fd; <span class="comment">// Address:Port(Must)</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> frame; <span class="comment">// Game Frame(Must)</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">bool</span> fromServer; <span class="comment">// It is from server, or client?(Must)</span></div><div class="line">    <span class="keyword">public</span> Vector3 velocity; <span class="comment">// Moving Velocity(Must)</span></div><div class="line">    <span class="keyword">public</span> Vector3 position; <span class="comment">// Position before moving(Check)</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　如上文所示，<code>position</code>为移动前的坐标，像这类数据客户端是不需要上传的，仅用于与服务端传来的快照作对比，以进行同步验证。</p>
<h2 id="同步流程"><a href="#同步流程" class="headerlink" title="同步流程"></a>同步流程</h2><p>　　由于<strong>服务端模拟游戏世界</strong>，所以采用了C/S一体化的设计。在代码层面上则是分为<code>ServerMgr</code>与<code>ClientMgr</code>两个<code>MonoBehaviour</code>，ServerMgr负责收集客户端的快照并整合下发，而ClientMgr负责发送快照与模拟来自服务端的快照以驱动同步单位的运行。如下图所示:<br><img src="https://musoucrow.github.io/images/tps_sync/flow.png" alt="flow"><br>　　图中所说的<em>同步快照</em>，是一种特殊的快照列表，它由服务端每帧打包，包括了多个客户端的一帧快照，客户端模拟它们即可驱动其他客户端代表的对象。采用这种同步流程只能保证在<strong>客户端是同一帧生成的快照，在服务端也会打包到同一个同步快照里</strong>。除此之外都不会保证（不会考虑到快照之间的帧间隔执行情况），即<strong>不需要精确到帧的同步</strong>。</p>
<h2 id="追赶进度"><a href="#追赶进度" class="headerlink" title="追赶进度"></a>追赶进度</h2><p>　　在正常的同步过程中情况总是理想的，但是一旦出现网络延迟或卡住的话，在恢复之时便会面临大量的快照，那么按照现有的做法便会导致与其他玩家的时间轴拉得太远（看到的画面是很久以前的了），这便需要设计<strong>追赶进度</strong>的机制。需要注意的是，追赶进度是服务端与客户端都需要的（服务器也有网络延迟和卡住的可能），客户端的追赶处理相当简单，同步快照超过一个数量则循环模拟:<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ClientMgr.cs</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.syncList.Count &gt; <span class="number">0</span>) &#123;</div><div class="line">    <span class="keyword">this</span>.Simulate();</div><div class="line">    </div><div class="line">    <span class="comment">// SYNCMAX = 15</span></div><div class="line">    <span class="keyword">while</span>(<span class="keyword">this</span>.syncList.Count &gt; SYNCMAX) &#123;</div><div class="line">        <span class="keyword">this</span>.Simulate();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　服务端方面则较为复杂，简而言之就是要知道每个客户端快照列表有<em>多少帧</em>（如4个快照，帧号分别为1, 2, 2, 3，则为3帧），当某个每个客户端快照的帧数过高，则循环打包到同步快照列表:<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ServerMgr.cs</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> list = <span class="keyword">new</span> List&lt;Snapshot&gt;(); <span class="comment">// sync-snapshot</span></div><div class="line"></div><div class="line"><span class="comment">// Foreach all clients.</span></div><div class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> i <span class="keyword">in</span> <span class="keyword">this</span>.unitMap) &#123;</div><div class="line">    <span class="keyword">int</span> frame = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">var</span> sl = i.Value.list;</div><div class="line"></div><div class="line">    <span class="comment">// INTERVAL = 10, i.Value.count that is count of frame.</span></div><div class="line">    <span class="keyword">while</span> (sl.Count &gt; <span class="number">0</span> &amp;&amp; (i.Value.count &gt; INTERVAL || (frame == <span class="number">-1</span> || sl[<span class="number">0</span>].frame == frame))) &#123;</div><div class="line">        <span class="keyword">var</span> s = sl[<span class="number">0</span>];</div><div class="line">        list.Add(s);</div><div class="line">        sl.RemoveAt(<span class="number">0</span>);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (frame != s.frame) &#123;</div><div class="line">            frame = s.frame;</div><div class="line">            i.Value.count--;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="本地先行"><a href="#本地先行" class="headerlink" title="本地先行"></a>本地先行</h2><p>　　本地先行可谓这类同步最玄学之处，不过只要了解其原理倒也无甚。需要本地先行的理由在上文已经阐述，由于是以服务端权威且不那么介意判定的问题，所以是可以允许玩家之间看到画面情况不一致这种情况的。况且在大多数场合下，玩家先行并不会造成什么问题（最终的结果趋于一致），但假设在这么一个场合下：<em>玩家A一直行走，在玩家B的视角里对玩家A进行了眩晕</em>。如此便会造成不同步了，所以需要进行<strong>同步验证</strong>以将问题修正。<br>　　要实现同步验证的思路倒也朴素:就是用一个验证列表将快照保存，当收到同步快照列表时就进行逐个对照（对比它们的验证数据，见前文），一旦发现不一致之处，就以当前位置开始，循环模拟同步快照，然后再继续循环模拟验证列表里进度比目前快的快照，追上最新进度:<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ClientMgr.cs</span></div><div class="line"></div><div class="line"><span class="comment">// Compare sync list and check list.</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.Count; i++) &#123;</div><div class="line">    <span class="keyword">if</span> (!list[i].Equals(<span class="keyword">this</span>.checkList[i])) &#123;</div><div class="line">        index = i;</div><div class="line">        print(i);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (index == list.Count) &#123; <span class="comment">// Agreement</span></div><div class="line">    <span class="keyword">this</span>.checkList.RemoveRange(<span class="number">0</span>, list.Count);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123; <span class="comment">// Need to fix.</span></div><div class="line">    <span class="keyword">var</span> frame = list[list.Count - <span class="number">1</span>].frame;</div><div class="line"></div><div class="line">    <span class="comment">// Remove useless snapshots.</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="keyword">this</span>.checkList.Count - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.checkList[i].frame &lt;= frame) &#123;</div><div class="line">            <span class="keyword">this</span>.checkList.RemoveAt(i);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Loop simulate.</span></div><div class="line">    ClientMgr.Resolve(<span class="keyword">this</span>.fd, list, index);</div><div class="line">    ClientMgr.Resolve(<span class="keyword">this</span>.fd, <span class="keyword">this</span>.checkList, <span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="服务端权威"><a href="#服务端权威" class="headerlink" title="服务端权威"></a>服务端权威</h2><p>　　从上文可以看出，本地先行会修正的范围只有本地玩家而已，回到之前的例子:<em>在玩家B的视角里对玩家A进行了眩晕</em>，假设这个行为在服务端上并没有达成（玩家A闪现走了），那么该如何修正呢？很显然可以选择搞个更大的修正系统，但我认为这样并不符合业界的常规做法，所以我给出的答案是: 眩晕行为需要在服务端触发了，然后由服务端将其作为快照，以正常同步的形式在诸客户端上展示。事实上在网络正常的情况下，这样的间隔最多也只是0.1x秒左右而已，完全可以接受。当然这么做对于玩家B而言肯定会发生修正（眩晕按理来说是之前的事了），所以我对此作了个措施: 为快照设计了<code>fromServer</code>属性，一旦是<code>fromServer = true</code>且属于本地玩家的快照，本地玩家会直接模拟而不会将其进行修正对比。这也可以看出这套同步的一个规则:<strong>会影响他人的操作，都需要由服务端发起</strong>。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>　　很显然，目前这个demo仍很不成熟，不少地方在业界应该会有更好的处理，如CS的射击纠正（服务端根据客户端的射击时间回滚之前的场景进行判定）。如此只能算是一个雏形，还是缺少实战项目的淬炼，先根据接下来的项目看看效果吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt;欢迎参与讨论，转载请注明出处。&lt;/strong&gt;      &lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;　　因友人的项目要做TPS联机对战游戏，本人
    
    </summary>
    
      <category term="Development" scheme="https://musoucrow.github.io/categories/Development/"/>
    
    
      <category term="Unity" scheme="https://musoucrow.github.io/tags/Unity/"/>
    
      <category term="Development" scheme="https://musoucrow.github.io/tags/Development/"/>
    
      <category term="NetworkSync" scheme="https://musoucrow.github.io/tags/NetworkSync/"/>
    
  </entry>
  
  <entry>
    <title>《DFQ》开发随录——界面</title>
    <link href="https://musoucrow.github.io/2018/10/29/dfq_ui/"/>
    <id>https://musoucrow.github.io/2018/10/29/dfq_ui/</id>
    <published>2018-10-29T13:02:54.000Z</published>
    <updated>2020-05-10T14:06:52.490Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong>欢迎参与讨论，转载请注明出处。</strong>      </p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　在游戏开发的领域里，界面（User Interface）是不可或缺的，在一些强大的游戏引擎会为其配备一套解决方案。和之前的一系列问题一样，<a href="http://love2d.org" target="_blank" rel="external">LÖVE</a>自然是不会提供的，所以又得自己折腾一套了，本文便记录其中心得。</p>
<h2 id="层级"><a href="#层级" class="headerlink" title="层级"></a>层级</h2><p>　　许多年前，因我年少没经验，写UI都是逐个显示对象并填写参数的。捞的嘛就不谈了，所以也就深刻意识到面向对象以及建立层级体系的重要性。所谓层级体系，也就是将显示对象之间根据需求建立起上下级关系，下级的显示数据会基于上级（如上级移动了坐标，下级也会随之改变），这种玩意在<a href="https://www.cocos.com" target="_blank" rel="external">Cocos</a>我称之为<strong>Layer-Node体系</strong>（如下图所示），在<a href="https://unity3d.com" target="_blank" rel="external">Unity</a>则是以<a href="https://docs.unity3d.com/ScriptReference/Transform.html" target="_blank" rel="external">Transform组件</a>实现。欣慰的是，在LÖVE11.0也追加了<a href="http://love2d.org/wiki/Transform" target="_blank" rel="external">Transform</a>，同时不幸的是，我用的是旧版本，所以最终是自己造了一遍轮子:(<br><img src="https://musoucrow.github.io/images/dfq_ui/layer.jpeg" alt="layer"></p>
<p>　　在设计上我首先实现了集显示与层级管理于一体的对象——Renderer，不过在实现上有点用力过猛，把Shader的层级管理也做了（下级的Shader会与上级的合并）。完成了这个核心之后，再分别设计基本的显示元素（Sprite、Animation、Particle、Label、Layer），不过我并没有另它们继承Renderer，而是设计了一个基类，并将Renderer作为成员对象存在，主要是Renderer的信息量过大，实是不宜直接继承了。结构如下图所示:<br><img src="https://musoucrow.github.io/images/dfq_ui/uml.png" alt="uml"></p>
<h2 id="焦点"><a href="#焦点" class="headerlink" title="焦点"></a>焦点</h2><p>　　要说UI对象与一般的显示对象最大的不同之处，那便是会接收来自玩家的触控输入了，尤其是作为手机游戏，会同时受到多个触控。再涉及到图层等问题后，便有必要建立一个焦点管理体系了。首先UI对象需要提供判定触控，以及按下、持续、弹起的接口。然后在UIManager提供接收触控输入、焦点管理、对象运行的服务。流程如下图所示:<br><img src="https://musoucrow.github.io/images/dfq_ui/focus.png" alt="focus"></p>
<p>　　至于“判定触控所在坐标是否有符合条件的对象”这一需求的实现，便与上文提到的层级体系相得益彰了:显示顺序为从尾到头，而判定自然也是从最顶部的显示对象开始的，于是乎只要将Layer的成员从尾到头遍历判定即可。至于不想参与判定的对象会设置专门属性跳过。</p>
<h2 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h2><p>　　这个便是老生常谈的设计模式了，去年我也对此作了<a href="https://musoucrow.github.io/2017/06/16/mvc_thinking/">一篇文章</a>。简要来说便是，UI对象只负责接收输入（Controller）以展示结果（View），UI对象所保存的数据为展示而服务，真正的数据保存在来源对象（Model）。示例如下图所示（这里的Event按照C#的Event去理解即可）:<br><img src="https://musoucrow.github.io/images/dfq_ui/mvc.png" alt="mvc"></p>
<p>　　当然以上只是个人的理解，在我看来Controller即Model与View的桥梁，只要符合这个性质的存在即为Controller，它不一定是个固定的形式。包括按钮的按下处理函数这样的存在只要是由外部传入的，那么它也算是Controller。</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>　　都8012年了，自然不可能以手写代码的形式创建UI布局，配置化自然是理所当然的:<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> &#123;</div><div class="line">    name = <span class="string">"mapName"</span>,</div><div class="line">    script = <span class="string">"advanced/mapName"</span>,</div><div class="line">    x = <span class="number">1100</span>,</div><div class="line">    y = <span class="number">-30</span>,</div><div class="line">    subject = &#123;</div><div class="line">        &#123;</div><div class="line">            name = <span class="string">"bottom"</span>,</div><div class="line">            script = <span class="string">"sprite"</span>,</div><div class="line">            sprite = <span class="string">"mapName"</span></div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">            name = <span class="string">"label"</span>,</div><div class="line">            script = <span class="string">"label"</span>,</div><div class="line">            font = <span class="string">"normal/18"</span>,</div><div class="line">            color = &#123;</div><div class="line">                red = <span class="number">241</span>,</div><div class="line">                green = <span class="number">218</span>,</div><div class="line">                blue = <span class="number">157</span>,</div><div class="line">                alpha = <span class="number">255</span></div><div class="line">            &#125;,</div><div class="line">            x = <span class="number">90</span>,</div><div class="line">            y = <span class="number">42</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　通过这般类似HTML的方式进行编写配置文件，交给专门的创建函数处理即可，具体的数据处理方式则交由对应的类（script）处理。若是开发了相应的UI编辑器还可以直接制作生成配置，很显然这里也是契合了层级体系，可见其重要性。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>　　目前这套界面体系还缺乏相应的编辑器以及没有自适应布局的功能，不过实际上我也不太需要这些。只能说面向内部与面向公众的要求级别是不一样的，所以这并不能代表通用UI库的设计思想，仅供参考而已。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt;欢迎参与讨论，转载请注明出处。&lt;/strong&gt;      &lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;　　在游戏开发的领域里，界面（User In
    
    </summary>
    
      <category term="Development" scheme="https://musoucrow.github.io/categories/Development/"/>
    
    
      <category term="Development" scheme="https://musoucrow.github.io/tags/Development/"/>
    
      <category term="DFQ" scheme="https://musoucrow.github.io/tags/DFQ/"/>
    
  </entry>
  
  <entry>
    <title>在macOS搭建LÖVE for Android平台</title>
    <link href="https://musoucrow.github.io/2018/08/24/build_love_android/"/>
    <id>https://musoucrow.github.io/2018/08/24/build_love_android/</id>
    <published>2018-08-24T11:54:33.000Z</published>
    <updated>2020-05-10T14:06:52.488Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong>欢迎参与讨论，转载请注明出处。</strong></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　近日在搭建macOS下的<a href="https://bitbucket.org/MartinFelis/love-android-sdl2" target="_blank" rel="external">LÖVE for Android</a>遇到了不少问题，虽然有<a href="https://bitbucket.org/MartinFelis/love-android-sdl2/wiki/Home" target="_blank" rel="external">官方Wiki</a>的帮助，但却发现了不少实操中才会遇到的问题，特此记录，以便后人。</p>
<h2 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h2><p>　　由于安卓SDK只支持到了JDK8，所以只好装JDK8，新版将无法打开安卓SDK。可选择前往<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="external">官网</a>或者使用<a href="https://brew.sh" target="_blank" rel="external">Homebrew</a>下载。使用Homebrew如此输入便可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ brew tap caskroom/versions</div><div class="line">$ brew cask install java8</div></pre></td></tr></table></figure></p>
<h2 id="SDK"><a href="#SDK" class="headerlink" title="SDK"></a>SDK</h2><p>　　由于谷歌的尿性，<a href="https://developer.android.com" target="_blank" rel="external">安卓SDK的官网</a>上已无合适的安卓SDK提供下载了，只剩下Android Studio和Android SDK命令行工具。此命令行工具实际上缺少了不少东西，所以也不推荐。本人推荐前往<a href="http://www.androiddevtools.cn" target="_blank" rel="external">AndroidDevTools</a>进行下载，认准SDK Tools项便是。<br>　　下载完成后便需要安装各种工具了，使用命令行运行SDK/tools目录下的android即可打开SDK安装界面，然后按照官方Wiki所言般安装相关工具即可。<img src="https://bitbucket.org/repo/A8Abzz/images/32734727-Screen%20Shot%202014-03-29%20at%200.19.30.png" alt="sdk"><br>　　值得一提的是Android Support Library，在谷歌官方源似乎已经找不到了，可以考虑换源或者直接下载<a href="https://dl-ssl.google.com/android/repository/support_r19.1.zip" target="_blank" rel="external">官方文件</a>，下载完成后置于SDK/extras目录下即可。  </p>
<h2 id="NDK"><a href="#NDK" class="headerlink" title="NDK"></a>NDK</h2><p>　　这里官方Wiki便开始坑人了：<code>Once you have the SDK tools you can get the NDK version r9d from here (Download acording to your system).</code>事实上r9d会因为某个部件版本过低而对接失败，必须是小于15大于9的版本。去AndroidDevTools下载即可。</p>
<h2 id="Ant"><a href="#Ant" class="headerlink" title="Ant"></a>Ant</h2><p>　　这个没什么坑点，照常下载即可。不过ant将会作为一个常用命令去使用，所以推荐在Homebrew进行安装：<code>$ brew install ant</code>即可。</p>
<h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><p>　　把<a href="https://bitbucket.org/MartinFelis/love-android-sdl2/src/master/" target="_blank" rel="external">love-android-sdl2</a>下载后（当然我使用的是0.10.2版本，所以下载的是<a href="https://bitbucket.org/rude/love/downloads/love-0.10.2-android-source.tar.gz" target="_blank" rel="external">这个</a>），仍需要配置环境变量，参考官方Wiki即可。大致上是在<code>~/.bash_profile</code>文件添加SDK与NDK的路径：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">export ANDROID_HOME=/Developer/SDKs/android-sdk-macosx</div><div class="line">export ANDROID_NDK=/Developer/Tools/ndk</div></pre></td></tr></table></figure></p>
<p>　　然后是在<code>/etc/paths.d/android-sdk</code>文件添加SDK的tools与platform-tools以及ant的bin目录：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">/Developer/SDKs/android-sdk-macosx/tools</div><div class="line">/Developer/SDKs/android-sdk-macosx/platform-tools</div><div class="line">/Developer/Tools/ant/bin</div></pre></td></tr></table></figure></p>
<h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>　　环境变量部署完毕后，便可以开始编译LÖVE for Android工程了（ndk-build是NDK文件夹下的一个工具）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cd ~/repos/love-android-sdl2</div><div class="line">$ ndk-build</div></pre></td></tr></table></figure></p>
<p>　　若是一切平安无事的话，便接近大功告成了！</p>
<h2 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h2><p>　　首先需要在LÖVE for Android目录下新建assets文件夹，然后将游戏打包命名为<code>game.love</code>并放置过去。然后在LÖVE for Android目录下执行<code>$ ant debug</code>即可，稍等便会于bin目录下生成apk文件。<br>　　当然这样生成的apk文件与从官网直接下载的APK包外表无异，所以仍需要定制化，参考<a href="https://bitbucket.org/MartinFelis/love-android-sdl2/wiki/Game_Packaging" target="_blank" rel="external">此篇</a>即可，不再复述。</p>
<h2 id="后续问题"><a href="#后续问题" class="headerlink" title="后续问题"></a>后续问题</h2><ul>
<li>由于在大多数硬盘格式上是不区分大小写的，而到了<code>.love</code>文件下则会区分。这点需要仔细检查。</li>
<li>由于LÖVE for Android使用的LuaJIT版本为2.1，而普世平台（Windows/macOS/Ubuntu）使用的版本还在2.0.4，而2.1与2.0的字节码无法兼容，所以需要使用2.1版本进行生成。</li>
<li>在手机上对于GLSL的格式要求更为严格，详情参考<a href="https://bitbucket.org/MartinFelis/love-android-sdl2/wiki/Shaders_in_Android/" target="_blank" rel="external">此篇</a>，总体来说便是：<strong>不要写整数，小数点结尾也不要带f</strong>。</li>
</ul>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>　　其实当年也曾在Windows系统部署过，却未曾有现在这般多坑，可见流行系统也有流行系统的好处啊。这篇文章似乎都可以投稿到他们仓库了呢（笑）</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt;欢迎参与讨论，转载请注明出处。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;　　近日在搭建macOS下的&lt;a href=&quot;http
    
    </summary>
    
      <category term="Teach" scheme="https://musoucrow.github.io/categories/Teach/"/>
    
    
      <category term="LÖVE" scheme="https://musoucrow.github.io/tags/LOVE/"/>
    
      <category term="Android" scheme="https://musoucrow.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>《DFQ》开发随录——资源管理</title>
    <link href="https://musoucrow.github.io/2018/07/27/dfq_res/"/>
    <id>https://musoucrow.github.io/2018/07/27/dfq_res/</id>
    <published>2018-07-27T08:41:33.000Z</published>
    <updated>2020-05-10T14:06:52.490Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong>欢迎参与讨论，转载请注明出处。</strong>      </p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　在游戏开发的领域里，游戏资源的管理可谓一个很重要的基础功能，在一些强大的游戏引擎会为其配备一套解决方案。而<a href="http://love2d.org" target="_blank" rel="external">LÖVE</a>很不幸的再次没有提供，好在即使没有也起码做好了内存管理的工作，那么即便自己动手做一套也不是什么困难的事了，本文便记录其中心得。<br>　　资源管理模块本质上只做了两件事：</p>
<ul>
<li>生命周期管理：保证多次加载时资源的复用，在无需该资源时进行销毁。</li>
<li>配置接口：提供加载资源的API，以及外部化的资源配置。  </li>
</ul>
<p>　　接下来便围绕以上两点展开说明其中的要点。</p>
<h2 id="生命周期管理"><a href="#生命周期管理" class="headerlink" title="生命周期管理"></a>生命周期管理</h2><p>　　如上文所言，生命周期管理要做的事即：保证多次加载时资源的复用，在无需该资源时进行销毁。资源复用的实现思路非常的简单，使用哈希表将资源以路径-对象为映射关系进行存储即可，然后每次加载资源时进行一次检查，若存在表内则直接获取，否则再进行读取。</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">local</span> poor = &#123;&#125;</div><div class="line"></div><div class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">GetResource</span><span class="params">(path)</span></span></div><div class="line">    <span class="keyword">if</span> (poor[path]) <span class="keyword">then</span></div><div class="line">        <span class="keyword">return</span> poor[path]</div><div class="line">    <span class="keyword">end</span></div><div class="line"></div><div class="line">    <span class="keyword">local</span> res = open(path)</div><div class="line">    <span class="comment">--... load resource.</span></div><div class="line">    poor[path] = res</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> res</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>　　接下来是第二个问题：在无需该资源时进行销毁。说得具体点便是：当外部没有对象引用该资源时，将其从资源池里移除。如此只需要使用弱引用即可，在Lua里即是建立<a href="http://www.lua.org/manual/5.3/manual.html#2.5.2" target="_blank" rel="external">弱表（weak table）</a>。</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">local</span> poor = &#123;&#125;</div><div class="line"><span class="built_in">setmetatable</span>(poor, &#123;__mode = <span class="string">'v'</span>&#125;)</div></pre></td></tr></table></figure>
<p>　　如此当poor内存在外部无引用的对象时，在垃圾回收时便会将其移除。如此资源的生命周期管理便算完成了。</p>
<h2 id="配置接口"><a href="#配置接口" class="headerlink" title="配置接口"></a>配置接口</h2><p>　　资源文件按照性质可以划分为两种：数据文件（二进制为主，如图片、声音等），配置文件（可编辑、可序列化的变量对象）。对于配置文件，Lua可以很方便地直接使用本体：</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> &#123;</div><div class="line">    x = <span class="number">1</span>,</div><div class="line">    y = <span class="number">2</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　只要将其读取后使用<code>loadstring(text)()</code>函数便可将其序列化，在其他引擎也有自定义配置格式以编辑器加持的形式解决，如Unity。现实情况中，一般数据文件会通过配置文件进行加载，即在配置文件提供对应资源的路径，然后由代码进行加载处理。</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> &#123;</div><div class="line">    image = <span class="string">"glow"</span>,</div><div class="line">    ox = <span class="number">5</span>,</div><div class="line">    oy = <span class="number">5</span>,</div><div class="line">    color = &#123;</div><div class="line">        r = <span class="number">255</span>,</div><div class="line">        g = <span class="number">255</span>,</div><div class="line">        b = <span class="number">255</span>,</div><div class="line">        a = <span class="number">127</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　如上配置所示，此配置的image项将会由代码根据配置提供的路径<code>glow</code>进行读取对应目录下的<code>image/glow.png</code>文件。如此便可看出，资源与资源之间存在很强的联动性，它们就像是一棵树，节节相扣。对于那些较上层的配置文件而言，往往会从上到下牵涉巨多资源。这么做是很棒的，一加载便将所有相关的资源都加载了，只要在恰当的场合进行资源加载（如切换地图），核心游戏过程中则几乎不会涉及到加载了。</p>
<h2 id="配置的健壮性"><a href="#配置的健壮性" class="headerlink" title="配置的健壮性"></a>配置的健壮性</h2><p>　　在没有编辑器加持的情况下，单纯的配置文件健壮性是有限的，最突出的两个需求便是：</p>
<ul>
<li>快捷定位路径：如位于<code>sprite/test/1.cfg</code>的配置文件想要读取位于同路径、不同分类下的<code>image/test/1.png</code>文件，如果没有一些辅助手段，那么只能傻傻的输入全路径，十分愚蠢。</li>
<li>参数注入：倘若存在一些大体相似，少部分不同的配置需求，若没有参数注入，那么只好傻傻的批量复制修改，也是十分的愚蠢。</li>
</ul>
<p>　　当然以上两点若是存在编辑器，自然可以无视并通过自动化手段之类达到相同的效果。但目前项目暂无编辑器，于是采用了替换文本的方案。</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">---sprite/test/1.cfg</span></div><div class="line"><span class="keyword">return</span> &#123;</div><div class="line">    image = <span class="string">"$A"</span>,</div><div class="line">    sx = $<span class="number">1</span>,</div><div class="line">    sy = $<span class="number">2</span>,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　如上配置所示，<code>$A</code>便是代表当前资源分类下的路径，即替换为<code>test/1</code>，如此便可快速定位至<code>image/test/1.png</code>，算是一种语法糖吧。至于<code>$1 $2</code>则代表第1、第2个注入的参数，在调用的API的时候会以<code>{1.2, 1}</code>的形式作为参数填入。如此便会将<code>$1</code>替换为<code>1.2</code>，同理<code>$2</code>替换为<code>1</code>。当然这种注入了参数的配置在资源池的key是不能使用路径的（不是标准的），会在其后加入参数值成为：<code>test/1|1.2|1</code>。</p>
<h2 id="配置的只读性"><a href="#配置的只读性" class="headerlink" title="配置的只读性"></a>配置的只读性</h2><p>　　由于资源对象往往都是独一一份，到处引用，倘若哪处不小心对其进行了修改，那么便会引起连锁反应影响全局。所以有必要考虑将资源对象设置为只读的：</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> _PrivateTips<span class="params">()</span></span></div><div class="line">	<span class="built_in">assert</span>(<span class="keyword">nil</span>, <span class="string">"The table is const."</span>)</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> _TABLE.NewConst<span class="params">(tab)</span></span></div><div class="line">	<span class="keyword">local</span> tabMt = <span class="built_in">getmetatable</span>(tab)</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (<span class="keyword">not</span> tabMt) <span class="keyword">then</span></div><div class="line">		tabMt = &#123;&#125;</div><div class="line">		<span class="built_in">setmetatable</span>(tab, tabMt)</div><div class="line">	<span class="keyword">end</span></div><div class="line"></div><div class="line">	<span class="keyword">local</span> const = tabMt.__const</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (<span class="keyword">not</span> const) <span class="keyword">then</span></div><div class="line">		const = &#123;&#125;</div><div class="line">		tabMt.__const = const</div><div class="line"></div><div class="line">		<span class="keyword">local</span> constMt = &#123;</div><div class="line">			__index = tab,</div><div class="line">			__newindex = _PrivateTips,</div><div class="line">			__const = const</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="built_in">setmetatable</span>(const, constMt)</div><div class="line">	<span class="keyword">end</span></div><div class="line"></div><div class="line">	<span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">pairs</span>(tab) <span class="keyword">do</span></div><div class="line">		<span class="keyword">if</span> (<span class="built_in">type</span>(v) == <span class="string">"table"</span>) <span class="keyword">then</span></div><div class="line">			tab[k] = _TABLE.NewConst(v)</div><div class="line">		<span class="keyword">end</span></div><div class="line">	<span class="keyword">end</span></div><div class="line"></div><div class="line">	<span class="keyword">return</span> const</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>　　只要将对象拿去处理后，试图修改该对象时将会报错。当然这样做是有代价的：<code>pairs()</code>和<code>table.getn</code>函数将会变得无法直接使用，需要取出其元表方可使用。所以需要配备专门函数：</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> _TABLE.Len<span class="params">(tab)</span></span></div><div class="line">	<span class="keyword">local</span> meta = <span class="built_in">getmetatable</span>(tab)</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (meta <span class="keyword">and</span> meta.__index) <span class="keyword">then</span></div><div class="line">		<span class="keyword">return</span> #meta.__index</div><div class="line">	<span class="keyword">else</span></div><div class="line">		<span class="keyword">return</span> #tab</div><div class="line">	<span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> _TABLE.Pairs<span class="params">(tab)</span></span></div><div class="line">	<span class="keyword">local</span> meta = <span class="built_in">getmetatable</span>(tab)</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (meta <span class="keyword">and</span> meta.__index) <span class="keyword">then</span></div><div class="line">		<span class="keyword">return</span> <span class="built_in">pairs</span>(meta.__index)</div><div class="line">	<span class="keyword">else</span></div><div class="line">		<span class="keyword">return</span> <span class="built_in">pairs</span>(tab)</div><div class="line">	<span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>　　这样子使用起来虽然麻烦了点，不过的确将资源对象和一般对象作出了明显的区分。另外只读处理的时机也需要考量的，一般得在整个资源对象处理完毕后才进行。</p>
<h2 id="配置的个性化"><a href="#配置的个性化" class="headerlink" title="配置的个性化"></a>配置的个性化</h2><p>　　对于一些普遍的资源文件（图片、声音、精灵、动画等），一般配备专属的处理函数即可。但是到了业务层面情况往往会繁杂许多，将会存在许多个性化的配置格式。这时候便需要将业务对象和资源对象进行绑定：</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> &#123;</div><div class="line">    script = <span class="string">"$A"</span>,</div><div class="line">    tagMap = &#123;</div><div class="line">        attack = <span class="keyword">true</span>,</div><div class="line">        attackRate = <span class="keyword">true</span>,</div><div class="line">        autoPlay = <span class="keyword">true</span></div><div class="line">    &#125;,</div><div class="line">    stopTime = <span class="number">200</span>,</div><div class="line">    endTime = <span class="number">300</span>,</div><div class="line">    nextState = <span class="string">"stay"</span>,</div><div class="line">    frameaniPath = <span class="string">"$0attack1"</span>,</div><div class="line">    actor = <span class="string">"bullet/throwstone"</span>,</div><div class="line">    bulletPos = &#123;</div><div class="line">        x = <span class="number">20</span>,</div><div class="line">        y = <span class="number">0</span>,</div><div class="line">        z = <span class="number">-60</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　如上配置所示，这是一个哥布林的投掷状态，这里的配置便需要提供子弹资源以及发射坐标了。关于这些个性化的配置项，将会如此解决：</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> _NewStateData<span class="params">(path, keys)</span></span></div><div class="line">    <span class="keyword">local</span> data, path = _RESOURCE.ReadConfig(path, <span class="string">"config/actor/state/%s.cfg"</span>, keys)</div><div class="line"></div><div class="line">    data.class = <span class="built_in">require</span>(<span class="string">"actor/state/"</span> .. data.script)</div><div class="line">    data.script = <span class="keyword">nil</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> (data.class.HandleData) <span class="keyword">then</span></div><div class="line">        data.class.HandleData(data)</div><div class="line">    <span class="keyword">end</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> data</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>　　可以看到，通过配置的script项找到对应的脚本业务对象，然后调用其对象的HandleData函数进行解析。如此便解决了个性化的问题。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>　　还是如上篇一般，这个问题对于流行的大引擎而言已经提供了成熟的解决方案。上了贼船呀，只能走到黑了。不过造造轮子也是有益技术的提升的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt;欢迎参与讨论，转载请注明出处。&lt;/strong&gt;      &lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;　　在游戏开发的领域里，游戏资源的管理可谓
    
    </summary>
    
      <category term="Development" scheme="https://musoucrow.github.io/categories/Development/"/>
    
    
      <category term="Development" scheme="https://musoucrow.github.io/tags/Development/"/>
    
      <category term="DFQ" scheme="https://musoucrow.github.io/tags/DFQ/"/>
    
  </entry>
  
  <entry>
    <title>《DFQ》开发随录——图集</title>
    <link href="https://musoucrow.github.io/2018/06/23/dfq_sheet/"/>
    <id>https://musoucrow.github.io/2018/06/23/dfq_sheet/</id>
    <published>2018-06-23T14:11:23.000Z</published>
    <updated>2020-05-10T14:06:52.490Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong>欢迎参与讨论，转载请注明出处。</strong>      </p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　在游戏开发的领域里，<a href="http://docs.cocos.com/creator/manual/zh/asset-workflow/atlas.html" target="_blank" rel="external">图集（SpriteSheet）</a>是一个很重要的概念，其好处在链接处也已言明。但若是引擎没提供相关的支持，那么便需要自己搞个解决方案了。而<a href="http://love2d.org" target="_blank" rel="external">LÖVE</a>也恰好是没有提供相关支持的，那么只好自己动手丰衣足食了，本文便记录其中心得。</p>
<h2 id="装箱问题"><a href="#装箱问题" class="headerlink" title="装箱问题"></a>装箱问题</h2><p>　　要实现图集的核心便是对图片进行拼合打包，其实类似的工具市面上亦有存在（如<a href="https://www.codeandweb.com/texturepacker" target="_blank" rel="external">TexturePacker</a>）。从功能上而论，TexturePacker完全可以满足需求（有提供命令行模式，可实现自动化）。可惜TexturePacker的免费版根本不堪使用，而破解也相继失败。而其他类似的工具要么无法满足需求，要么不支持macOS。只好自己手写一套了。<br>　　实现的图集的难点无非在于拼合时图片排列的算法，由<a href="https://www.cnblogs.com/clrs97/" target="_blank" rel="external">Claris</a>告知得这种属于<a href="https://baike.baidu.com/item/装箱问题/7749220" target="_blank" rel="external">装箱问题</a>，目前并无最优解。由装箱问题为关键字进行展开搜索，发现一种名为<a href="http://wiki.unity3d.com/index.php/MaxRectsBinPack" target="_blank" rel="external">MaxRectsBinPack</a>的算法可解决问题，我将之翻译成了<a href="https://github.com/MusouCrow/MaxRectsBinPack" target="_blank" rel="external">Python版</a>。如此装箱问题便解决了。</p>
<h2 id="拼合问题"><a href="#拼合问题" class="headerlink" title="拼合问题"></a>拼合问题</h2><p>　　接下来的问题便是“谁和谁拼合成一张图”了，我对此立下三个原则：</p>
<ul>
<li>关联性不高者不拼（拼成大图的代价便是成为资源共同体，如果关联性不高的拼合一块则会造成极大的内存浪费）</li>
<li>黑底与透明者不拼（黑底图拼成大图必须得保证全图无透明点，否则游戏里会出现奇怪的线条）</li>
<li>拼合后过大者不拼（需保证图片大小在4096*4096及以下，否则恐怕出现上限问题）</li>
</ul>
<p>　　以这三原则来看，是无法做到以文件夹为单位进行粗暴的拼合了。所以采用了编写配置的方式进行。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">"effect": &#123;</div><div class="line">    "map": &#123;</div><div class="line">        "lorien": [</div><div class="line">            "lorien",</div><div class="line">            "/actor/article/lorien/pathgate",</div><div class="line">            "/actor/article/lorien/largegrass"</div><div class="line">        ]</div><div class="line">    &#125;,</div><div class="line">    "death": [</div><div class="line">        "death",</div><div class="line">        "dieFlash"</div><div class="line">    ],</div><div class="line">    "buff": &#123;</div><div class="line">        "freeze": "freeze"</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　配置以JSON形式存储，配置中的key代表着合图文件夹的层级，value则为欲拼合的图片文件夹，若无<code>/</code>开头则代表以当前文件夹层级为路径，反之则为全路径。以这套方案便可很自由地选择拼合的方案了。</p>
<h2 id="配置问题"><a href="#配置问题" class="headerlink" title="配置问题"></a>配置问题</h2><p>　　图片的拼合问题解决后，便是游戏要如何以最低的代价去兼容新的图片形式了。解决方案自然是为原图片生成路径一致的配置文件，游戏通过读取配置文件以无缝对接新的图片形式。配置文件格式如下：</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> &#123;</div><div class="line">    image = <span class="string">"ui"</span>,</div><div class="line">    x = <span class="number">0</span>,</div><div class="line">    y = <span class="number">151</span>,</div><div class="line">    w = <span class="number">45</span>,</div><div class="line">    h = <span class="number">41</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　配置文件记录了所属合图的路径以及在合图中的坐标宽高，如此便可清晰无比地取得了。由于Python的<a href="https://pypi.python.org/pypi/lupa/" target="_blank" rel="external">lupa模块</a>装不上，为此还专门写了个<a href="https://github.com/MusouCrow/json_lua_exchange" target="_blank" rel="external">Lua与JSON的转换器</a>。</p>
<h2 id="大小问题"><a href="#大小问题" class="headerlink" title="大小问题"></a>大小问题</h2><p>　　一般而言，因为光栅化需要对纹理采样进行快速取值，图片大小需要遵循2的N次幂（256、512、1024…）。这种符合的图片被称为POT(Power-Of-Two)，同理不满足的称为NPOT(Non-Power-Of-Two)。在早期POT纹理可以说是必须的，而今在OpenGL ES2.0后支持了NPOT。但为了能满足ETC压缩以及兼容性，个人推荐还是对合图进行POT化。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>　　其实从这个问题来看，选择流行的大引擎的确会更为方便。在Unity里可以由后台自动完成的事情现在却要一篇文章来总结，不过贼船已经上了，就只能走到黑了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt;欢迎参与讨论，转载请注明出处。&lt;/strong&gt;      &lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;　　在游戏开发的领域里，&lt;a href=&quot;h
    
    </summary>
    
      <category term="Development" scheme="https://musoucrow.github.io/categories/Development/"/>
    
    
      <category term="Development" scheme="https://musoucrow.github.io/tags/Development/"/>
    
      <category term="DFQ" scheme="https://musoucrow.github.io/tags/DFQ/"/>
    
  </entry>
  
  <entry>
    <title>Lua的local变量探究</title>
    <link href="https://musoucrow.github.io/2018/04/17/lua_local/"/>
    <id>https://musoucrow.github.io/2018/04/17/lua_local/</id>
    <published>2018-04-17T06:20:33.000Z</published>
    <updated>2020-05-10T14:06:52.491Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong>欢迎参与讨论，转载请注明出处。</strong>      </p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　先前看到<a href="https://blog.uwa4d.com/archives/usparkle_luajit.html" target="_blank" rel="external">用好Lua+Unity，让性能飞起来—LuaJIT性能坑详解</a>一文中提到：</p>
<pre><code>3.2 寄存器分配失败-&gt;减少local变量、避免过深的调用层次
很不幸的一点是，arm中可用的寄存器比x86少。LuaJIT为了速度，会尽可能用寄存器存储local变量，但是如果local变量太多，寄存器不够用，目前JIT的做法是：放弃治疗（有兴趣可以看看源码中asm_head_side函数的注释）。因此，我们能做的，只有按照官方优化指引说的，避免过多的local变量，或者通过do end来限制local变量的生命周期。
</code></pre><p>　　对此自然是可以理解的，哪怕是一般语言，local变量过多也会有堆栈溢出的问题。不过我对此一直有个隐忧：<strong>Lua是拥有模块级local变量的，不知是否也受此规则影响？</strong>尽管有此隐忧，却一直没有去做相关的探究。恰逢今日遇到相关话题，便来个刨根问底吧。</p>
<h2 id="200限制"><a href="#200限制" class="headerlink" title="200限制"></a>200限制</h2><p>　　首先的发现是：一段过程下最多拥有200个local变量，且<code>do end</code>不算。类似这样：</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">local</span> Class = &#123;&#125;</div><div class="line"></div><div class="line"><span class="keyword">local</span> test1 = <span class="number">1</span></div><div class="line"><span class="keyword">local</span> test2 = <span class="number">2</span></div><div class="line">... <span class="comment">--to 199</span></div><div class="line"></div><div class="line"><span class="keyword">return</span> Class</div></pre></td></tr></table></figure>
<p>　　如果超过199，则会报出<code>main function has more than 200 local variables</code>的错误。当然这里说的是一段过程，所以函数是另算的，同样一个函数的过程最多也不能超过200个local变量（调用函数则算转入下一个过程了）。<br>　　这个限制是Lua与LuaJIT共有的，显然是想限制local数量的泛滥。</p>
<h2 id="函数嵌套调用"><a href="#函数嵌套调用" class="headerlink" title="函数嵌套调用"></a>函数嵌套调用</h2><p>　　接下来便是试试函数嵌套调用了：</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Class.Do</span><span class="params">(v)</span></span></div><div class="line">    <span class="keyword">if</span> (v &gt; n) <span class="keyword">then</span> <span class="comment">--n is a custom value</span></div><div class="line">        <span class="keyword">return</span></div><div class="line">    <span class="keyword">end</span></div><div class="line"></div><div class="line">    <span class="keyword">local</span> test1 = <span class="number">1</span></div><div class="line">    ... <span class="comment">-- to 199</span></div><div class="line"></div><div class="line">    Class.Do(v + <span class="number">1</span>)</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>　　注意参数v也算是local变量的一员，所以test变量最多只能延伸到199个。以此进行递归调用的话，根据实验结果来看：</p>
<table>
<thead>
<tr>
<th>版本</th>
<th>嵌套上限</th>
<th>local变量上限</th>
</tr>
</thead>
<tbody>
<tr>
<td>LuaJIT</td>
<td>325</td>
<td>65000</td>
</tr>
<tr>
<td>Lua5.3</td>
<td>4975</td>
<td>995000</td>
</tr>
</tbody>
</table>
<p>　　测试的环境为macOS x86-64，LuaJIT方面无论JIT开启与否结果皆一致。根据前文所言来看，到了ARM环境这个数量将会进一步下降。虽然从对比来看差距有点大，但实际上在函数调用方面也算够用了。</p>
<h2 id="模块级local变量"><a href="#模块级local变量" class="headerlink" title="模块级local变量"></a>模块级local变量</h2><p>　　接下来便是我最关心的一点了：以上local变量上限是否会影响到模块级local变量？所谓模块级local变量即作用域为整个文件：</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">--test.lua</span></div><div class="line"><span class="keyword">local</span> Class = &#123;&#125;</div><div class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">Func</span><span class="params">()</span></span></div><div class="line"><span class="keyword">end</span></div><div class="line">...</div><div class="line"></div><div class="line"><span class="keyword">return</span> Class</div></pre></td></tr></table></figure>
<p>　　这种模块级local变量在Lua开发的应用还是很广泛的，它能有效的做到信息分隔的效果。但若是这些变量也受之前的上限规则影响，咁就扑街了！</p>
<p>　　首先是测试加载多个满载local变量的模块：</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> n=<span class="number">1</span>, <span class="number">5000</span> <span class="keyword">do</span></div><div class="line">    <span class="built_in">require</span>(<span class="string">"test"</span> .. n)</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>　　天可怜见，无论读取多少个文件，都不会存在上限问题。可见对于模块级local变量的处理是不一样的。到了这里基本上可以放心了，不过为防万一，我还做了模块的嵌套引用实验：</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">---test1.lua</span></div><div class="line"></div><div class="line"><span class="keyword">local</span> Class = &#123;&#125;</div><div class="line"><span class="built_in">print</span>(<span class="string">"1"</span>)</div><div class="line"><span class="keyword">local</span> Next = <span class="built_in">require</span>(<span class="string">"test2"</span>)</div><div class="line"><span class="keyword">local</span> test1 = <span class="number">1</span></div><div class="line"><span class="keyword">local</span> test2 = <span class="number">2</span></div><div class="line">... <span class="comment">--to max</span></div><div class="line"><span class="keyword">return</span> Class</div></pre></td></tr></table></figure>
<p>　　以这种形式生成了5000个文件，以此进行嵌套引用，结果也是成功通过了。由此可见，对于模块级local变量是可以放心地去使用了。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>　　尽管模块级local变量是可以随便用了，但是也要考虑到热更新方面的问题：若是选择使用模块级local变量去存储模块的数据，那么在热更新方面的处理将会变得十分麻烦。从这点考虑的话，模块级local变量最好只是用于引用别的模块为妙。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt;欢迎参与讨论，转载请注明出处。&lt;/strong&gt;      &lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;　　先前看到&lt;a href=&quot;https:/
    
    </summary>
    
      <category term="ProgramDesign" scheme="https://musoucrow.github.io/categories/ProgramDesign/"/>
    
    
      <category term="ProgramDesign" scheme="https://musoucrow.github.io/tags/ProgramDesign/"/>
    
      <category term="Lua" scheme="https://musoucrow.github.io/tags/Lua/"/>
    
  </entry>
  
</feed>
